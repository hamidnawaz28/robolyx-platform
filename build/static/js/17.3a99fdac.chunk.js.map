{"version":3,"sources":["global/table/table.actionCreators.js","global/table/table.actions.js","global/dropDownSelect.js","global/table/table.table.js","global/utils/utils.actions.js","global/utils/utils.actionsCreators.js","../node_modules/@material-ui/core/esm/DialogActions/DialogActions.js","../node_modules/@material-ui/icons/esm/RotateLeft.js","main/spendanalysis/Components/taxonomy/TaxonomyDataForm.jsx","main/spendanalysis/Components/taxonomy/TaxonomyQueryForm.jsx","main/spendanalysis/Components/taxonomy/Taxonomy.jsx"],"names":["updateTableData","data","type","payload","updatePerPage","updateCurrentPage","updateTotalRows","updateFormQuery","selectAll","queryData","credentials","apiData","dispatch","axios","get","SERVER_URL","params","then","res","serviceData","JSON","parse","forEach","element","push","count","catch","error","alert","deleteData","delApiData","fetchApiData","delete","updateData","updateApiData","put","postData","postApiData","post","implementRule","TEST_AND_IMPLEMENT_RULE","e","DropDownSelect","props","Lists","dataList","dataType","DataType","fieldName","label","selectedValue","onChangeEvent","catagoryLevel","allOptions","map","ListItem","pk","className","Object","keys","item","key","fields","SensitivityLevel","value","fullWidth","htmlFor","native","inputProps","id","onChange","event","onSelect","aria-label","useStyles","makeStyles","actionButtons","actionButtonsMargin","tableWrap","headRow","bodyRows","headCells","bodyCells","noData","styled","Grid","TableData","classes","useDispatch","tableStates","useSelector","state","totalRows","perPage","currentPage","IsAllSelected","query","tableHeaders","selectOption","paginationOption","apiLink","addNewDataHandle","editDataHandle","ruleImpEnabled","isActionsEnabled","singleSelectHandle","target","parentElement","getAttribute","tableDataPrev","updatedData","index","stringify","project","deleteApiData","implementApiData","useEffect","color","m","variant","onClick","pkArray","length","implementRuleHandle","startIcon","outArray","editData","deleteDataHandle","stickyHeader","size","checked","checkedStatus","SingleHeader","row","hover","IsChecked","component","rowsPerPageOptions","rowsPerPage","page","onChangePage","currPage","currentTarget","ariaLabel","onChangeRowsPerPage","newTablePerPage","updateTaxonomyCategories","UTILS","updateDraftRulesPK","updateImplementedRulesPK","updateInvoicesPk","updateRolesList","DialogActions","React","ref","_props$disableSpacing","disableSpacing","other","_objectWithoutProperties","_extends","clsx","root","spacing","withStyles","display","alignItems","padding","justifyContent","flex","marginLeft","name","createSvgIcon","createElement","d","FormPopUp","actionType","formData","formState","formCloseEvent","updateDataFunction","table","initialState","CATEGORY_LEVEL_ONE","CATEGORY_LEVEL_TWO","CATEGORY_LEVEL_THREE","CATEGORY_LEVEL_FOUR","CATEGORY_LEVEL_FIVE","useState","categories","setCategories","updateApidata","postDataApi","Dialog","open","onClose","aria-labelledby","DialogTitle","Typography","align","gutterBottom","Box","DialogContent","container","xs","sm","md","lg","xl","TextField","multiline","justify","position","Button","BorderWrapper","TaxonomyQueryForm","categoriesData","utilsData","pt","mb","Search","RotateLeft","Taxonomy","selectedRow","setSelectedRow","setActionType","setFormState","TAXONOMY_DATA","TAXONOMY_ATTRIBUTES","rowData","TaxonomyDataForm"],"mappings":"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","file":"static/js/17.3a99fdac.chunk.js","sourcesContent":["import * as type from './table.actionTypes'\r\nexport const updateTableData=(data)=>(\r\n    {\r\n        type: type.TABLE_DATA,\r\n        payload: data\r\n    }\r\n);\r\nexport const updatePerPage=(data)=>(\r\n    {\r\n        type: type.PER_PAGE,\r\n        payload: data\r\n    }\r\n);\r\nexport const updateCurrentPage=(data)=>(\r\n    {\r\n        type: type.CURRENT_PAGE,\r\n        payload: data\r\n    }\r\n);\r\nexport const updateTotalRows=(data)=>(\r\n    {\r\n        type: type.TOTAL_ROWS,\r\n        payload: data\r\n    }\r\n);\r\nexport const updateFormQuery = (data) => (\r\n    {\r\n        type : type.FORM_QUERY,\r\n        payload : data\r\n    }\r\n);\r\nexport const selectAll=(data)=>(\r\n    {\r\n        type: type.IS_ALL_SELECTED,\r\n        payload: data\r\n    }\r\n);","import axios from 'axios'\r\nimport { useDispatch } from 'react-redux'\r\nimport {\r\n    SERVER_URL,\r\n    TEST_AND_IMPLEMENT_RULE\r\n} from '../constants'\r\nimport { \r\n    updateTableData, \r\n    updateTotalRows, \r\n    updatePerPage, \r\n    updateCurrentPage, \r\n    selectAll \r\n} from './table.actionCreators'\r\nconst queryData = (credentials, apiData ) => {\r\n        return dispatch => {\r\n            axios\r\n                .get(`${SERVER_URL}${credentials}`, { params : apiData })\r\n                .then((res)=>{\r\n                    let serviceData = JSON.parse(res.data.queryData);\r\n                    let data = []\r\n                    serviceData.forEach(element => {\r\n                        element[\"IsChecked\"] = false\r\n                        data.push(element)\r\n                    });\r\n                    dispatch(updateTableData(data))\r\n                    dispatch(updateTotalRows(res.data.count))\r\n                    //  dispatch(IsUpdating(false))\r\n                })\r\n                .catch((error)=>{\r\n                    alert(error)\r\n                    // dispatch(IsUpdating(false))\r\n                    // dispatch(FetchError(true))\r\n                })\r\n        }\r\n}\r\n\r\nconst deleteData = (credentials, delApiData, fetchApiData) =>{\r\n        return dispatch => {\r\n            axios\r\n                .delete(`${SERVER_URL}${credentials}`, { params : delApiData })\r\n                .then((res)=>{\r\n                    alert(res.data)\r\n                    dispatch( queryData( credentials, fetchApiData ))\r\n                    //  dispatch(IsUpdating(false))\r\n                })\r\n                .catch((error)=>{\r\n                    alert(error)\r\n                })\r\n        }\r\n}\r\nconst updateData = ( credentials , updateApiData , fetchApiData ) =>{\r\n    return dispatch => {\r\n        axios\r\n            .put(`${SERVER_URL}${credentials}`, { params : updateApiData })\r\n            .then((res)=>{\r\n                alert(res.data)\r\n                dispatch( queryData( credentials, fetchApiData ))\r\n                //  dispatch(IsUpdating(false))\r\n            })\r\n            .catch((error)=>{\r\n                alert(error)\r\n            })\r\n    }\r\n}\r\nconst postData = ( credentials , postApiData, fetchApiData ) =>{\r\n    return dispatch => {\r\n        axios\r\n            .post(`${SERVER_URL}${credentials}`, { params : postApiData })\r\n            .then((res)=>{\r\n                alert(res.data)\r\n                dispatch( queryData( credentials, fetchApiData ))\r\n                //  dispatch(IsUpdating(false))\r\n            })\r\n            .catch((error)=>{\r\n                alert(error)\r\n            })\r\n    }\r\n}\r\nconst implementRule = (credentials, postApiData, fetchApiData)=>{\r\n    return dispatch =>{\r\n        axios.post(`${SERVER_URL}${TEST_AND_IMPLEMENT_RULE}/`,{ params : postApiData})\r\n        .then((res)=>{\r\n            alert(res.data)\r\n            dispatch( queryData( credentials, fetchApiData ))\r\n        })\r\n        .catch((e)=>{\r\n            alert(e)\r\n        })\r\n    }\r\n}\r\nexport { deleteData, queryData, updateData, postData, implementRule }","// import * as All from '../Global/actions';\r\nimport React from 'react';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nfunction DropDownSelect(props) {\r\n        const { \r\n            dataList : Lists, \r\n            DataType : dataType, \r\n            fieldName, \r\n            label, \r\n            selectedValue, \r\n            onChangeEvent,\r\n            catagoryLevel\r\n        } = props\r\n        let allOptions = '';\r\n        if (Lists) {\r\n            if (dataType === \"KeyValue\") {\r\n                allOptions = Lists.map((ListItem) => <option pk={ListItem[\"pk\"]} className=\"selectOption\">{ListItem[\"name\"]}</option>);\r\n            }\r\n            if (dataType === \"ListData\") {\r\n                allOptions = Lists.map((ListItem) => <option pk={ListItem} className=\"selectOption\">{ListItem}</option>);\r\n            }\r\n            if (dataType === \"ListDataWithCatagory\") {\r\n                allOptions = Lists.map((ListItem) => <option catagoryLevel ={catagoryLevel} pk={ListItem} className=\"selectOption\">{ListItem}</option>);\r\n            }\r\n            if (dataType === \"ListDataWithFieldName\") {\r\n                allOptions = Lists.map((ListItem) => <option fieldName ={fieldName} pk={ListItem} className=\"selectOption\">{ListItem}</option>);\r\n            }\r\n            if(dataType===\"GroupDataWithType\"){\r\n                allOptions = Object.keys(Lists).map((ListItem) => \r\n                Lists[ListItem].map((item)=><option dataType={ListItem}  className=\"selectOption\">{item}</option>)\r\n                );\r\n            }\r\n            if (dataType === \"WithPkAndFieldName\") {\r\n                allOptions = Lists.map((ListItem) => \r\n                <option key={ListItem.pk} pk={ListItem.pk} \r\n                    className=\"selectOption\">{(ListItem ?.fields?.[fieldName])?\r\n                                                ListItem.fields[fieldName]:<></>}\r\n                </option>);\r\n            }\r\n            if(dataType === \"GroupData\"){\r\n                let SensitivitiesLevels = Object.keys(Lists)\r\n                allOptions = SensitivitiesLevels.map((SensitivityLevel) =>\r\n                    <optgroup label={SensitivityLevel} className={SensitivityLevel+\"Options\"}>\r\n                            {\r\n                                Object.keys(Lists[SensitivityLevel]).map((data)=>\r\n                                    <>\r\n                                        { Lists[SensitivityLevel][data].map((value)=>\r\n                                            <option \r\n                                                data=\r\n                                                    {[\r\n                                                        SensitivityLevel,data,value\r\n                                                    ]}>\r\n                                                {value}\r\n                                            </option>\r\n                                        )}\r\n                                    </>\r\n                                )\r\n                            }\r\n                    </optgroup>)\r\n            }\r\n        }\r\n        return (\r\n            <>\r\n                <FormControl fullWidth>\r\n                    <InputLabel htmlFor=\"outlined-native-simple\" > \r\n                        {label} \r\n                    </InputLabel>\r\n                    <Select \r\n                        native \r\n                        inputProps={{\r\n                            id: 'filled-native-simple',\r\n                          }}\r\n                        label=\"Default Templetes\" \r\n                        value={selectedValue} \r\n                        onChange={(event) => onChangeEvent(event)} \r\n                        onSelect={(event) => onChangeEvent(event)} \r\n                        className=\"selectInput\">\r\n                        <option aria-label=\"None\" value=\"\"></option>\r\n                        {allOptions}\r\n                    </Select>\r\n                </FormControl>\r\n        </>\r\n    )\r\n}\r\nexport default DropDownSelect;\r\n","import React, { useEffect } from 'react';\r\nimport {\r\n    Table, \r\n    TableBody, \r\n    TableCell, \r\n    TableHead,\r\n    TableRow, \r\n    Paper, \r\n    TablePagination, \r\n    Checkbox,\r\n    CardMedia, \r\n    Card, \r\n    Typography\r\n} from '@material-ui/core'\r\nimport { \r\n    connect, \r\n    useDispatch, \r\n    useSelector \r\n} from 'react-redux'\r\nimport { \r\n    updateTableData, \r\n    updatePerPage, \r\n    updateCurrentPage, \r\n    updateTotalRows, \r\n    selectAll \r\n} from './table.actionCreators'\r\nimport styled from 'styled-components';\r\nimport { Button, Box, Grid } from '@material-ui/core'\r\nimport { DeleteOutline, Add, Edit} from '@material-ui/icons'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { queryData, deleteData, implementRule } from \"./table.actions\"\r\nconst useStyles = makeStyles({\r\n    actionButtons : {\r\n        \"paddingTop\" : \"5px\",\r\n        \"paddingLeft\" : \"22px\"\r\n    },\r\n    actionButtonsMargin : {\r\n        \"marginRight\" : \"10px\"\r\n    },\r\n    tableWrap : {\r\n        \"maxWidth\": \"1025px\", \r\n        \"overflow\": \"auto\" \r\n    },\r\n    headRow : {\r\n        \"borderRadius\" : \"15px 50px 30px 5px\", \r\n        \"height\" : \"10px\",\r\n        \"backgroundColor\": \"white\"\r\n    },\r\n    bodyRows : {\r\n        \"height\": \"10px\", \r\n        \"padding\": \"0px\"\r\n    },\r\n    headCells : {\r\n        \"backgroundColor\": \"white\", \r\n        \"color\": \"black\", \r\n        \"fontSize\": \"12px\",\r\n        \"textAlign\": \"left\"\r\n    },\r\n    bodyCells : {\r\n        \"fontSize\": \"11px\",\r\n        \"textAlign\": \"left\"\r\n    },\r\n    noData : {\r\n        \"textAlign\" : \"center\",\r\n        \"margin\" : \"20px\"\r\n    }\r\n})\r\nconst ActionsGrid = styled(Grid)`\r\n    paddingTop : \"5px\",\r\n    paddingLeft : \"22px\"\r\n`\r\n// const styles = theme => ({\r\n//     root: {\r\n//         width: '100%',\r\n//         marginTop: theme.spacing.unit * 3,\r\n//         overflowX: 'auto',\r\n//     },\r\n//     table: {\r\n//         minWidth: 700,\r\n//     },\r\n// });\r\nconst selRowsArr = (rowsData)=> {\r\n    let outArray = []\r\n        for (let index in rowsData) {\r\n            if (rowsData[index]['IsChecked'] == true) {\r\n                outArray.push(rowsData[index])\r\n            }\r\n        }\r\n    return outArray\r\n}\r\nfunction TableData(props) {\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const tableStates = useSelector(state => state.tableStates)\r\n    const { data, totalRows, perPage, currentPage, IsAllSelected, query } = tableStates\r\n    const { \r\n        tableHeaders, \r\n        selectOption, \r\n        paginationOption, \r\n        apiLink , \r\n        addNewDataHandle, \r\n        editDataHandle, \r\n        isActionsEnabled,\r\n        ruleImpEnabled\r\n    } = props\r\n    \r\n    const selectAllHandle = (e) => {\r\n        const checkedStatus = e.target.checked\r\n        dispatch(selectAll(checkedStatus))\r\n        let tableDataPrev = data;\r\n        let updatedData = [];\r\n        for (let index in tableDataPrev) {\r\n            let item = { ...tableDataPrev[index] };\r\n            item['IsChecked'] = checkedStatus\r\n            updatedData.push(item)\r\n        }\r\n        dispatch(updateTableData(updatedData))\r\n    }\r\n    const singleSelectHandle = (e) => {\r\n        debugger;\r\n        let pk = e.target.parentElement.parentElement.getAttribute(\"pk\")\r\n        if (pk == null) {\r\n            pk = e.target.parentElement.getAttribute(\"pk\")\r\n        }\r\n        let tableDataPrev = data;\r\n        let updatedData = [];\r\n        for (let index in tableDataPrev) {\r\n            let item = { ...tableDataPrev[index] };\r\n            if(item['pk'] == pk){\r\n                item['IsChecked'] = !item['IsChecked']\r\n            }\r\n            updatedData.push(item)\r\n        }\r\n        dispatch(updateTableData(updatedData))\r\n    }\r\n    let fetchApiData = {\r\n        query : JSON.stringify(query),\r\n        currentPage : currentPage,\r\n        perPage : perPage,\r\n        project : \"1\",\r\n    }\r\n    let deleteApiData = {\r\n        project : \"1\",\r\n    }\r\n    let implementApiData = {\r\n        project : \"1\"\r\n    }\r\n    const deleteDataHandle = () => {\r\n        let pkArray = [];\r\n        for (let index in data) {\r\n            if (data[index]['IsChecked'] == true) {\r\n                pkArray.push(data[index]['pk'])\r\n            }\r\n        }\r\n        deleteApiData[\"pkArray\"] = JSON.stringify(pkArray)\r\n        pkArray.length >0?\r\n            dispatch( deleteData( apiLink, deleteApiData, fetchApiData ))\r\n            :alert(\"Select Data\")\r\n    }\r\n    const editData = () => {\r\n        let outArray = []\r\n        for (let index in data) {\r\n            if (data[index]['IsChecked'] == true) {\r\n                outArray.push(data[index])\r\n            }\r\n        }\r\n        outArray.length>1 || outArray.length==0\r\n        ? alert(\"Select A single Row\")\r\n        : editDataHandle(outArray[0])\r\n    }\r\n    const implementRuleHandle = () =>{\r\n        let pkArray = [];\r\n        for (let index in data) {\r\n            if (data[index]['IsChecked'] == true) {\r\n                pkArray.push(data[index]['pk'])\r\n            }\r\n        }\r\n        implementApiData[\"pkArray\"] = JSON.stringify(pkArray)\r\n        fetchApiData[\"STATUS\"] = 'draft'\r\n        pkArray.length >0?\r\n            dispatch( implementRule( apiLink, implementApiData, fetchApiData ))\r\n            :alert(\"Select Data\")\r\n    }\r\n    const changePageHandle = (e) => {\r\n        let currPage = currentPage\r\n        e.currentTarget.ariaLabel == \"Next page\" ? currPage += 1 : currPage -= 1\r\n        dispatch(updateCurrentPage(currPage))\r\n        fetchApiData['currentPage'] = currPage\r\n        dispatch(queryData( apiLink, fetchApiData ))\r\n    }\r\n    const changeRowsPerPageHandle = (e) => {\r\n        let newTablePerPage = e.target.value;\r\n        dispatch(updatePerPage(newTablePerPage))\r\n        dispatch(updateCurrentPage(0))\r\n        fetchApiData['perPage'] = newTablePerPage\r\n        fetchApiData['currentPage'] = 0\r\n        dispatch(queryData( apiLink, fetchApiData ))\r\n    }\r\n    useEffect( () => { dispatch( queryData( apiLink, fetchApiData ))},[])\r\n    const variant = 'contained'\r\n    const color = 'primary'\r\n    return (\r\n        <Paper>\r\n            {  selectOption &&\r\n                <div className = {classes.actionButtons}>\r\n                    <Box m={1} >\r\n                        {   \r\n                            ruleImpEnabled &&\r\n                            <Button\r\n                                color={color}\r\n                                variant={variant}\r\n                                // startIcon={<DeleteOutline />}\r\n                                onClick={() => implementRuleHandle()}\r\n                                className={classes.actionButtonsMargin}\r\n                            >\r\n                            Implement\r\n                            </Button>\r\n                        }\r\n                        <Button\r\n                            color={color}\r\n                            variant={variant}\r\n                            startIcon={<Add />}\r\n                            onClick={() => addNewDataHandle()}\r\n                            className={classes.actionButtonsMargin}\r\n                        >\r\n                        Add\r\n                        </Button>\r\n                        <Button\r\n                            color={color}\r\n                            variant={variant}\r\n                            startIcon={<Edit/>}\r\n                            onClick={() => editData()}\r\n                            className={classes.actionButtonsMargin}\r\n                        >\r\n                        Edit\r\n                        </Button>\r\n                        <Button\r\n                            color={color}\r\n                            variant={variant}\r\n                            startIcon={<DeleteOutline />}\r\n                            onClick={() => deleteDataHandle()}\r\n                            className={classes.actionButtonsMargin}\r\n                        >\r\n                        Delete\r\n                        </Button>\r\n                    </Box>\r\n                </div>\r\n            }\r\n            \r\n            <div className = {classes.tableWrap}>\r\n                <Table \r\n                    stickyHeader \r\n                    aria-label=\"sticky table\" \r\n                    size=\"small\" \r\n                    className = {classes.tableWrap}>\r\n                    <TableHead>\r\n                        <TableRow className={classes.headRow}>\r\n                            {   selectOption && \r\n                                    <TableCell className={classes.headCells} >\r\n                                        <Checkbox \r\n                                            color={color} \r\n                                            checked={IsAllSelected}\r\n                                            onClick={selectAllHandle} \r\n                                        />\r\n                                    </TableCell>\r\n                            }\r\n                            <TableCell className={classes.headCells} >ID</TableCell>\r\n                            {Object.keys(tableHeaders).map(SingleHeader =>\r\n                                <TableCell \r\n                                    className={classes.headCells} \r\n                                >\r\n                                    {SingleHeader}\r\n                                </TableCell>\r\n                            )}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        \r\n                        {data.length > 0 && data.map(row => (\r\n                            <TableRow \r\n                                className={classes.bodyRows} \r\n                                hover={true}\r\n                                onClick={ selectOption && singleSelectHandle}\r\n                                pk={row.pk}\r\n                                checked={row.IsChecked}\r\n                            >\r\n                                {\r\n                                    selectOption &&\r\n                                        <TableCell>\r\n                                            <Checkbox \r\n                                                color={color} \r\n                                                pk={row.pk} \r\n                                                checked={row.IsChecked}\r\n                                            />\r\n                                        </TableCell>\r\n                                }\r\n                                {row?.pk && <TableCell>{row.pk}</TableCell>}\r\n                                {\r\n                                    Object.keys(tableHeaders).map(key =>\r\n                                        <TableCell \r\n                                            className ={ classes.bodyCells }\r\n                                        >\r\n                                        {row.fields[tableHeaders[key]]}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                            </TableRow>\r\n                        )) }\r\n                    </TableBody>\r\n                </Table>\r\n                {\r\n                    data.length == 0 && \r\n                        <Card className={classes.noData}>\r\n                            <Typography  component=\"h2\">\r\n                                No Data\r\n                            </Typography>\r\n                        </Card>\r\n                }\r\n            </div>\r\n            {\r\n                paginationOption &&\r\n                <TablePagination\r\n                    rowsPerPageOptions={[3, 5, 10, 25,50, 100,500]}\r\n                    component=\"div\"\r\n                    count={totalRows}\r\n                    rowsPerPage={perPage}\r\n                    page={currentPage}\r\n                    onChangePage={changePageHandle}\r\n                    onChangeRowsPerPage={changeRowsPerPageHandle}\r\n                />\r\n            }\r\n        </Paper>\r\n    );\r\n}\r\n\r\nexport default TableData;\r\n","import axios from 'axios'\r\nimport { useDispatch } from 'react-redux'\r\nimport { getTaxonomyCategories, getDraftedRulesPk, getImplementedRulesPk, getAllInvoicesPk, getRolesList } from './utils.actionsCreators'\r\nimport {\r\n    SERVER_URL,\r\n    UTILS\r\n} from '../constants'\r\nconst projectKey = '1'\r\nconst updateTaxonomyCategories = () => {\r\n    return dispatch => {\r\n        axios\r\n            .get(\r\n                `${SERVER_URL}${UTILS}`,\r\n                {\r\n                    params:{\r\n                        type: \"TaxonomyCategories\",\r\n                        project: projectKey\r\n                    }\r\n                }\r\n            )\r\n            .then((res) => {\r\n                dispatch(getTaxonomyCategories(res.data))\r\n            })\r\n            .catch((error) => {\r\n                alert(error)\r\n            })\r\n    }\r\n}\r\n\r\nconst updateDraftRulesPK = () => {\r\n    return dispatch => {\r\n        axios\r\n            .get(\r\n                `${SERVER_URL}${UTILS}`,\r\n                {\r\n                    params:{\r\n                        type: \"DraftRulesPK\",\r\n                        project: projectKey\r\n                    }\r\n                }\r\n            )\r\n            .then((res) => {\r\n                dispatch(getDraftedRulesPk(res.data))\r\n            })\r\n            .catch((error) => {\r\n                alert(error)\r\n            })\r\n    }\r\n}   \r\nconst updateImplementedRulesPK = () => {\r\n    return dispatch => {\r\n        axios\r\n            .get(\r\n                `${SERVER_URL}${UTILS}`,\r\n                {\r\n                    params:{\r\n                        type: \"ImplementedRulesPK\",\r\n                        project: projectKey\r\n                    }\r\n                }\r\n            )\r\n            .then((res) => {\r\n                dispatch(getImplementedRulesPk(res.data))\r\n            })\r\n            .catch((error) => {\r\n                alert(error)\r\n            })\r\n    }\r\n}   \r\nconst updateInvoicesPk = () => {\r\n    return dispatch => {\r\n        axios\r\n            .get(\r\n                `${SERVER_URL}${UTILS}`,\r\n                {\r\n                    params:{\r\n                        type: \"InvoicesPK\",\r\n                        project: projectKey\r\n                    }\r\n                }\r\n            )\r\n            .then((res) => {\r\n                dispatch(getAllInvoicesPk(res.data))\r\n            })\r\n            .catch((error) => {\r\n                alert(error)\r\n            })\r\n    }\r\n}   \r\nconst updateRolesList = () => {\r\n    return dispatch => {\r\n        axios\r\n            .get(\r\n                `${SERVER_URL}${UTILS}`,\r\n                {\r\n                    params:{\r\n                        type: \"RolesList\",\r\n                        project: projectKey\r\n                    }\r\n                }\r\n            )\r\n            .then((res) => {\r\n                dispatch(getRolesList(res.data))\r\n            })\r\n            .catch((error) => {\r\n                alert(error)\r\n            })\r\n    }\r\n} \r\nexport { updateTaxonomyCategories, updateDraftRulesPK, updateImplementedRulesPK, updateInvoicesPk, updateRolesList }\r\n","import * as type from './utils.actionTypes'\r\n\r\nexport const getTaxonomyCategories=(data)=>(\r\n    {\r\n        type: type.GET_TAXONOMY_CATEGORIES,\r\n        payload: data\r\n    }\r\n);\r\nexport const getDraftedRulesPk=(data)=>(\r\n    {\r\n        type: type.DRAFTED_RULES_PK,\r\n        payload: data\r\n    }\r\n);\r\nexport const getImplementedRulesPk=(data)=>(\r\n    {\r\n        type: type.IMPLEMENTED_RULES_PK,\r\n        payload: data\r\n    }\r\n);\r\nexport const getAllInvoicesPk=(data)=>(\r\n    {\r\n        type: type.ALL_INVOICES_PK,\r\n        payload: data\r\n    }\r\n);\r\nexport const getRolesList=(data)=>(\r\n    {\r\n        type: type.ALL_ROLES_LIST,\r\n        payload: data\r\n    }\r\n);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: 8,\n    justifyContent: 'flex-end',\n    flex: '0 0 auto'\n  },\n\n  /* Styles applied to the root element if `disableSpacing={false}`. */\n  spacing: {\n    '& > :not(:first-child)': {\n      marginLeft: 8\n    }\n  }\n};\nvar DialogActions = /*#__PURE__*/React.forwardRef(function DialogActions(props, ref) {\n  var _props$disableSpacing = props.disableSpacing,\n      disableSpacing = _props$disableSpacing === void 0 ? false : _props$disableSpacing,\n      classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"disableSpacing\", \"classes\", \"className\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, !disableSpacing && classes.spacing),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogActions.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the actions do not have additional margin.\n   */\n  disableSpacing: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiDialogActions'\n})(DialogActions);","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M7.11 8.53L5.7 7.11C4.8 8.27 4.24 9.61 4.07 11h2.02c.14-.87.49-1.72 1.02-2.47zM6.09 13H4.07c.17 1.39.72 2.73 1.62 3.89l1.41-1.42c-.52-.75-.87-1.59-1.01-2.47zm1.01 5.32c1.16.9 2.51 1.44 3.9 1.61V17.9c-.87-.15-1.71-.49-2.46-1.03L7.1 18.32zM13 4.07V1L8.45 5.55 13 10V6.09c2.84.48 5 2.94 5 5.91s-2.16 5.43-5 5.91v2.02c3.95-.49 7-3.85 7-7.93s-3.05-7.44-7-7.93z\"\n}), 'RotateLeft');","import { connect, useDispatch, useSelector } from 'react-redux'\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n    Grid,\r\n    Box,\r\n    Typography,\r\n    Button,\r\n    TextField,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogTitle,\r\n    DialogContent\r\n} from '@material-ui/core'\r\nimport { updateData, postData } from '../../../../global/table/table.actions'\r\nfunction FormPopUp(props){\r\n    const { actionType, formData, formState, formCloseEvent, updateDataFunction, apiLink , table } = props\r\n    const tableStates = useSelector(state => state.tableStates)\r\n    const { perPage, currentPage, query} = tableStates\r\n\r\n    const initialState = {\r\n        CATEGORY_LEVEL_ONE:\"\",\r\n        CATEGORY_LEVEL_TWO:\"\",\r\n        CATEGORY_LEVEL_THREE:\"\",\r\n        CATEGORY_LEVEL_FOUR:\"\",\r\n        CATEGORY_LEVEL_FIVE:\"\"\r\n    }\r\n    const [categories, setCategories ] =  useState(initialState)\r\n    const credentials = apiLink\r\n    const dispatch = useDispatch()\r\n    let updateApidata = {\r\n        pk : formData.pk,\r\n        payload : JSON.stringify(categories),\r\n    }\r\n    let postDataApi = {\r\n        payload : JSON.stringify(categories),\r\n        project : \"1\",\r\n    }\r\n    let fetchApiData = {\r\n        query : JSON.stringify(query),\r\n        currentPage : currentPage,\r\n        perPage : perPage,\r\n        project : \"1\",\r\n    }\r\n    const handleSave = () => {\r\n        if (actionType == \"Edit\") {\r\n            dispatch( updateData(\r\n                apiLink, updateApidata, fetchApiData\r\n            ));\r\n        }\r\n        else {\r\n            dispatch( postData(\r\n                apiLink, postDataApi, fetchApiData\r\n            ));\r\n        }\r\n        formCloseEvent()\r\n    }\r\n    useEffect( () => {\r\n        if(actionType==\"Edit\"){\r\n            let updatedData = {}\r\n            Object.keys(initialState).map((element)=>{\r\n                updatedData[element] = formData.fields[element]\r\n            })\r\n            setCategories(updatedData)\r\n        }\r\n    }, [] )\r\n    const textFieldId = 'outlined-basic'\r\n    const textFieldVarient = 'outlined'\r\n    return(\r\n        \r\n        <>\r\n            <div>\r\n                <Dialog open={formState} onClose={formCloseEvent} aria-labelledby=\"form-dialog-title\">\r\n                    <DialogTitle id=\"form-dialog-title\">\r\n                        <Typography variant=\"h6\" component=\"h2\" align=\"center\" gutterBottom>\r\n                            <Box >{actionType} { table }\r\n                            </Box>\r\n                        </Typography>    \r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <Grid container spacing={0}>\r\n                            <Grid xs={6} sm={6} md={6} lg={6} xl={6} >\r\n                                <Box m={1}>\r\n                                    <TextField\r\n                                        id = { textFieldId }\r\n                                        variant = { textFieldVarient }\r\n                                        label=\"Category Level 1\"\r\n                                        multiline\r\n                                        value ={categories[\"CATEGORY_LEVEL_ONE\"]}\r\n                                        onChange={(e)=>setCategories({...categories, [`CATEGORY_LEVEL_ONE`]: e.target.value})}\r\n                                    />\r\n                                </Box>\r\n                            </Grid>\r\n                            <Grid xs={6} sm={6} md={6} lg={6} xl={6} >\r\n                                <Box m={1}>\r\n                                    <TextField\r\n                                        id={ textFieldId }\r\n                                        variant={ textFieldVarient }\r\n                                        label=\"Category Level 2\"\r\n                                        multiline\r\n                                        value ={categories[\"CATEGORY_LEVEL_TWO\"]}\r\n                                        onChange={(e)=>setCategories({...categories, [`CATEGORY_LEVEL_TWO`]: e.target.value})}\r\n                                    />\r\n                                </Box>\r\n                            </Grid>\r\n                            <Grid xs={6} sm={6} md={6} lg={6} xl={6} >\r\n                                <Box m={1}>\r\n                                    <TextField\r\n                                        id={ textFieldId }\r\n                                        variant={ textFieldVarient }\r\n                                        label=\"Category Level 3\"\r\n                                        multiline\r\n                                        value ={categories[\"CATEGORY_LEVEL_THREE\"]}\r\n                                        onChange={(e)=>setCategories({...categories, [`CATEGORY_LEVEL_THREE`]: e.target.value})}\r\n                                    />\r\n                                </Box>\r\n                            </Grid>\r\n                            <Grid xs={6} sm={6} md={6} lg={6} xl={6} >\r\n                                <Box m={1}>\r\n                                    <TextField\r\n                                        id={ textFieldId }\r\n                                        variant={ textFieldVarient }\r\n                                        label=\"Category Level 4\"\r\n                                        multiline\r\n                                        value ={categories[\"CATEGORY_LEVEL_FOUR\"]}\r\n                                        onChange={(e)=>setCategories({...categories, [`CATEGORY_LEVEL_FOUR`]: e.target.value})}\r\n                                    />\r\n                                </Box>\r\n                            </Grid>\r\n                            <Grid xs={6} sm={6} md={6} lg={6} xl={6} >\r\n                                <Box m={1}>\r\n                                    <TextField\r\n                                        id={ textFieldId }\r\n                                        variant={ textFieldVarient }\r\n                                        label=\"Category Level 5\"\r\n                                        multiline\r\n                                        value ={categories[\"CATEGORY_LEVEL_FIVE\"]}\r\n                                        onChange={(e)=>setCategories({...categories, [`CATEGORY_LEVEL_FIVE`]: e.target.value})}\r\n                                    />\r\n                                </Box>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                    </DialogContent>\r\n                    <Grid container justify=\"center\">\r\n                        <DialogActions position=\"centre\">\r\n                            <Button onClick={() => handleSave()} variant=\"contained\" color=\"primary\">\r\n                                {actionType==\"Edit\"?\"Update\":\"Save\"}\r\n                        </Button>\r\n                            <Button onClick={formCloseEvent} variant={ textFieldVarient } color=\"primary\">\r\n                                Cancel\r\n                        </Button>\r\n                        </DialogActions>\r\n                    </Grid>\r\n                </Dialog>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FormPopUp;\r\n","import React, { useState, useEffect} from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Grid, Button, Box } from '@material-ui/core'\r\nimport { Search, RotateLeft } from '@material-ui/icons'\r\nimport DropDownSelect from '../../../../global/dropDownSelect'\r\nimport { updateFormQuery } from '../../../../global/table/table.actionCreators'\r\nimport { queryData } from '../../../../global/table/table.actions'\r\nimport { updateTaxonomyCategories } from '../../../../global/utils/utils.actions.js'\r\nimport styled from 'styled-components'\r\nconst BorderWrapper = styled(Box)`\r\n    background: white\r\n`\r\nfunction TaxonomyQueryForm(props){\r\n    const dispatch = useDispatch()\r\n    const tableStates = useSelector(state => state.tableStates)\r\n    const categoriesData  = useSelector(state =>state.utilsData.categoriesData)\r\n    const { perPage, currentPage, query} = tableStates\r\n    const { apiLink } = props  \r\n    const initialState = {\r\n        \"CATEGORY_LEVEL_ONE\": '',\r\n        \"CATEGORY_LEVEL_TWO\": '',\r\n        \"CATEGORY_LEVEL_THREE\": '',\r\n        \"CATEGORY_LEVEL_FOUR\": '',\r\n        \"CATEGORY_LEVEL_FIVE\": '',\r\n    }\r\n    const [ categories, setCategories ] = useState (initialState);\r\n    const credentials = apiLink\r\n    let fetchApiData = {\r\n        currentPage : currentPage,\r\n        perPage : perPage,\r\n        project : \"1\"\r\n    }\r\n    const searchQueryHandle = () => {\r\n        fetchApiData[\"query\"] = JSON.stringify(categories)\r\n        dispatch( updateFormQuery (categories))\r\n        dispatch( queryData ( credentials, fetchApiData ))\r\n    }\r\n    const resetQueryHandle = () => {\r\n        fetchApiData[\"query\"] = JSON.stringify(initialState)\r\n        setCategories(initialState)\r\n        dispatch( updateFormQuery (initialState))\r\n        dispatch( queryData ( credentials, fetchApiData ))\r\n    }\r\n    useEffect(()=>{\r\n        const apiData = {\r\n            project : \"1\"\r\n        }\r\n        dispatch(updateTaxonomyCategories(apiData))\r\n    },[])\r\n    return(\r\n        <BorderWrapper  pt={3} mb ={3}>\r\n            <Grid container spacing={0}>\r\n                <Grid xs={6} sm={6} md={10} lg={10} xl={10} >\r\n                    <Grid container spacing={0}>\r\n                        {Object.keys(categories).map(key =>\r\n                            <Grid xs={6} sm={6} md={3} lg={3} xl={3} >\r\n                                <Box m={1}>\r\n                                    <DropDownSelect\r\n                                        dataList={categoriesData[key]}\r\n                                        label={key}\r\n                                        DataType=\"ListDataWithCatagory\"\r\n                                        selectedValue={categories[key]}\r\n                                        catagoryLevel={key}\r\n                                        onChangeEvent={(e) => setCategories({...categories, [key]:e.target.value})}\r\n                                    />\r\n                                </Box>\r\n                            </Grid>\r\n                        )}\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid xs={6} sm={6} md={10} lg={2} xl={2} >\r\n                    <Box m={1}>\r\n                        <Button\r\n                            color=\"primary\"\r\n                            variant=\"contained\"\r\n                            startIcon={ <Search/> }\r\n                            onClick={() => searchQueryHandle()}\r\n                        >\r\n                            Search\r\n                        </Button>\r\n                    </Box>\r\n                    <Box m={1}>\r\n                        <Button\r\n                            color=\"primary\"\r\n                            variant=\"contained\"\r\n                            startIcon={ <RotateLeft/>}\r\n                            onClick={ () => resetQueryHandle() }\r\n                        >\r\n                            Reset\r\n                        </Button>\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n        </BorderWrapper>\r\n    );\r\n}\r\nexport default TaxonomyQueryForm","import React, { useState } from 'react'\r\nimport Table from '../../../../global/table/table.table'\r\nimport { \r\n    TAXONOMY_ATTRIBUTES,\r\n    TAXONOMY_DATA\r\n} from '../../../../global/constants'\r\nimport TaxonomyDataForm from './TaxonomyDataForm'\r\nimport  TaxonomyQueryForm from './TaxonomyQueryForm'\r\nfunction Taxonomy() {\r\n    const [selectedRow, setSelectedRow] = useState('');\r\n    const [actionType, setActionType] = useState('');\r\n    const [formState, setFormState] = useState(false);\r\n    const addNewDataHandle = () =>{\r\n        setActionType(\"New\")\r\n        setFormState(true)\r\n    }\r\n    const editDataHandle = (rowData) =>{\r\n        setSelectedRow(rowData)\r\n        setActionType(\"Edit\")\r\n        setFormState(true)\r\n    }\r\n    return (\r\n        <>\r\n            < TaxonomyQueryForm\r\n                apiLink = { TAXONOMY_DATA }\r\n            />\r\n            <Table\r\n                tableHeaders = { TAXONOMY_ATTRIBUTES }\r\n                selectOption = { true }\r\n                paginationOption = { true } \r\n                apiLink = { TAXONOMY_DATA }\r\n                addNewDataHandle = { addNewDataHandle }\r\n                editDataHandle = { editDataHandle }\r\n            />\r\n             {\r\n                formState &&\r\n                    <TaxonomyDataForm\r\n                        apiLink = { TAXONOMY_DATA }\r\n                        table = { 'Taxonomy' }\r\n                        actionType = { actionType }\r\n                        formState = { formState }\r\n                        formData = { selectedRow }\r\n                        formCloseEvent = { () => setFormState(false) }\r\n                    />\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Taxonomy"],"sourceRoot":""}