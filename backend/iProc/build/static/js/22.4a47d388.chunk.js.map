{"version":3,"sources":["common/storage/sessionStorage.js","common/api.js",".env","common/regex.handler.js","main/payment/partials/PaymentForm.js","pages/tables/CustomizedTable.js","main/payment/partials/PaymentOptions.js","main/payment/Payment.js","main/payment/payment.actions.js","main/payment/payment.actionCreators.js","main/payment/Payment.container.js"],"names":["sessionStorage","get","key","serialized","window","getItem","JSON","parse","err","set","value","stringify","setItem","console","error","clear","remove","removeItem","axios","defaults","baseURL","getOptions","config","appEnv","isEmpty","localStorage","user","verificationToken","headers","Authorization","concat","url","merge","getHeaders","api","options","module","exports","emailRegex","test","passwordRegex","Button","styled","MuiButton","spacing","useStyles","makeStyles","theme","card","marginTop","marginBottom","button","alignItems","marginLeft","CARD_OPTIONS","iconStyle","style","base","iconColor","fontWeight","fontFamily","fontSize","fontSmoothing","invalid","color","CardField","onChange","className","PaymentForm","props","classes","stripe","useStripe","elements","useElements","useState","setError","cardComplete","setCardComplete","processing","setProcessing","setMessage","setMessageType","email","phone","name","billingDetails","setBillingDetails","payment","paymentAmount","setPaymentType","handleSubmit","event","a","preventDefault","getElement","focus","createPaymentMethod","type","CardElement","billing_details","payload","id","paymentMethod","amount","initialValues","validate","values","errors","touched","handleChange","onSubmit","FormControl","margin","fullWidth","TextField","label","autoFocus","helperText","e","target","autoComplete","complete","Grid","container","direction","justify","mr","variant","mt","onClick","disabled","React","forwardRef","ref","innerRef","Card","MuiCard","CardContent","MuiCardContent","Paper","MuiDivider","MuiPaper","CustomTableCell","withStyles","head","backgroundColor","palette","common","white","body","TableCell","borderBottom","CustomTableRow","TableRow","CustomizedTableDemo","columns","columnsHeading","title","message","rowsHeading","rows","mb","pb","Typography","gutterBottom","Table","TableHead","map","column","index","component","align","rowSpan","scope","TableBody","row","item","isBoolean","green","red","setIcon","SimpleTable","Fragment","xs","size","PaymentOptions","CustomizedTable","width","breakpoints","up","flex","display","flexDirection","justifyContent","divider","paymentDiv","padding","ELEMENTS_OPTIONS","fonts","cssSrc","stripePromise","loadStripe","Wrapper","Payment","status","Divider","dispatch","Types","method","data","then","response","action","catch","connect","state","paymentStore"],"mappings":"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","file":"static/js/22.4a47d388.chunk.js","sourcesContent":["const sessionStorage = {\r\n  get: (key) => {\r\n    try {\r\n      const serialized = window.sessionStorage.getItem(key);\r\n      if (serialized === null) {\r\n        return undefined;\r\n      }\r\n      return JSON.parse(serialized);\r\n    } catch (err) {\r\n      return undefined;\r\n    }\r\n  },\r\n  set: (key, value) => {\r\n    try {\r\n      const serialized = JSON.stringify(value);\r\n      window.sessionStorage.setItem(key, serialized);\r\n    } catch (err) {\r\n      /* eslint-disable no-console */\r\n      console.error(err);\r\n      /* eslint-enable no-console */\r\n    }\r\n  },\r\n  clear: () => {\r\n    try {\r\n      window.sessionStorage.clear();\r\n    } catch (err) {\r\n      /* eslint-disable no-console */\r\n      console.error(err);\r\n      /* eslint-enable no-console */\r\n    }\r\n  },\r\n  remove: (key) => {\r\n    try {\r\n      window.sessionStorage.removeItem(key);\r\n    } catch (err) {\r\n      // eslint-disable-next-line no-console\r\n      console.error(err);\r\n    }\r\n  }\r\n};\r\n\r\nexport default sessionStorage;\r\n","import merge from 'lodash/merge';\r\nimport get from 'lodash/get';\r\nimport isEmpty from 'lodash/isEmpty';\r\nimport map from 'lodash/map';\r\nimport axios from 'axios';\r\nimport localStorage from './storage/localStorage';\r\nimport sessionStorage from './storage/sessionStorage';\r\nimport appEnv from '../.env';\r\n\r\n// axios.defaults.baseURL = appEnv.apiUrl;\r\naxios.defaults.baseURL = \"http://localhost:8090/\";\r\nconst getHeaders = (config) => {\r\n  \r\n  const user = localStorage.get('user');\r\n  const verificationToken = sessionStorage.get('verificationToken');\r\n  const bearerToken = () => {\r\n    if (config.url === 'v1/users/verify' || config.url === 'v1/users/reset-password') {\r\n      return verificationToken;\r\n    }\r\n    return get(user, 'access_token');\r\n  };\r\n  const headers = { Authorization: 'Bearer '.concat(bearerToken()) };\r\n  return merge({}, config, { headers });\r\n};\r\n\r\nconst getOptions = (config) => {\r\n  const ap = appEnv\r\n  const hasAuthenticated = !isEmpty(localStorage.get('user')) || !isEmpty(sessionStorage.get('verificationToken'));\r\n  if (hasAuthenticated) {\r\n    return getHeaders(config);\r\n  }\r\n  return config;\r\n};\r\n\r\nconst api = (config) => {\r\n  const options = getOptions(config);\r\n  return axios(options);\r\n};\r\n\r\nexport const concurrent = fns => axios.all(map(fns, f => f()));\r\n\r\nexport default api;\r\n","module.exports = __webpack_public_path__ + \"static/media/.env.7cb5ef0c.bin\";","export const emailRegex = value => (/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i).test(value);\r\n\r\nexport const passwordRegex = value => (/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/).test(value);\r\n","import {CardElement, Elements, useElements, useStripe} from '@stripe/react-stripe-js';\r\nimport {\r\n  Formik,\r\n  Form\r\n} from 'formik';\r\nimport React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { emailRegex, passwordRegex } from '../../../common/regex.handler';\r\nimport {\r\n  FormControl,\r\n  TextField,\r\n  Button as MuiButton,\r\n  Grid,\r\n  makeStyles\r\n} from \"@material-ui/core\";\r\nimport styled from \"styled-components\";\r\nimport { spacing } from \"@material-ui/system\";\r\n\r\nconst Button = styled(MuiButton)(spacing);\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  card: {\r\n    marginTop: theme.spacing(10),\r\n    marginBottom: theme.spacing(12)\r\n  },\r\n  button: {\r\n    alignItems: 'left',\r\n    marginLeft: '5px'\r\n  }\r\n}));\r\n\r\nconst CARD_OPTIONS = {\r\n  iconStyle: 'solid',\r\n  style: {\r\n    base: {\r\n      iconColor: '#c4f0ff',\r\n      fontWeight: 500,\r\n      fontFamily: 'Roboto, Open Sans, Segoe UI, sans-serif',\r\n      fontSize: '16px',\r\n      fontSmoothing: 'antialiased',\r\n      ':-webkit-autofill': {\r\n      },\r\n    },\r\n    invalid: {\r\n      iconColor: 'red',\r\n      color: 'red',\r\n    },\r\n  },\r\n};\r\n\r\nconst CardField = ({onChange}) => (\r\n  <div className=\"FormRow\">\r\n    <CardElement options={CARD_OPTIONS} onChange={onChange} />\r\n  </div>\r\n);\r\n\r\nconst PaymentForm = (props) => {\r\n  const classes = useStyles();\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const [error, setError] = useState(null);\r\n  const [cardComplete, setCardComplete] = useState(false);\r\n  const [processing, setProcessing] = useState(false);\r\n  const [message, setMessage] = useState('');\r\n  const [messageType, setMessageType] = useState('');\r\n  const [billingDetails, setBillingDetails] = useState({\r\n    email: '',\r\n    phone: '',\r\n    name: '',\r\n  });\r\n  const { payment, paymentAmount, setPaymentType } = props;\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (!stripe || !elements) {\r\n      return;\r\n    }\r\n\r\n    if (error) {\r\n      elements.getElement('card').focus();\r\n      return;\r\n    }\r\n\r\n    if (cardComplete) {\r\n      setProcessing(true);\r\n    }\r\n\r\n    const payload = await stripe.createPaymentMethod({\r\n      type: 'card',\r\n      card: elements.getElement(CardElement),\r\n      billing_details: billingDetails,\r\n    });\r\n    setMessage('Your Payment is in progress.');\r\n    setMessageType('success');\r\n\r\n    if (payload.error) {\r\n      setProcessing(false);\r\n      setError(payload.error);\r\n    } else {\r\n        const { id } = payload.paymentMethod;\r\n        payment({id, amount: paymentAmount});\r\n    }\r\n  };\r\n  \r\n    return (\r\n      <Formik\r\n        className=\"form\"\r\n        initialValues={{ email: '', name: '', phone: '', card: '' }}\r\n        handleSubmit={async (event)=>{\r\n          event.preventDefault();\r\n  \r\n          if (!stripe || !elements) {\r\n            return;\r\n          }\r\n      \r\n          // if (error) {\r\n          //   elements.getElement('card').focus();\r\n          //   return;\r\n          // }\r\n      \r\n          if (cardComplete) {\r\n            // setProcessing(true);\r\n          }\r\n      \r\n          const payload = await stripe.createPaymentMethod({\r\n            type: 'card',\r\n            card: elements.getElement(CardElement),\r\n            //billing_details: billingDetails,\r\n          });\r\n          // setMessage('Your Payment is in progress.');\r\n          // setMessageType('success');\r\n      \r\n          if (payload.error) {\r\n            // setProcessing(false);\r\n            // setError(payload.error);\r\n          } else {\r\n              const { id } = payload.paymentMethod;\r\n              payment({id, amount: paymentAmount});\r\n          }\r\n        }}\r\n        validate={(values) => {\r\n          const errors = {};\r\n          if (!values.name) {\r\n            errors.name = 'Name is required';\r\n          }\r\n\r\n          if (!values.email) {\r\n            errors.email = 'Email is required';\r\n          }\r\n\r\n          if (!values.phone) {\r\n            errors.phone = 'Phone Number is required';\r\n          }\r\n\r\n          if (!emailRegex(values.email)) {\r\n            errors.email = 'Invalid email address';\r\n          }\r\n\r\n          return errors;\r\n        }}\r\n      >\r\n        {(props) => {\r\n          const {\r\n            values,\r\n            touched,\r\n            errors,\r\n            handleChange,\r\n          } = props;\r\n          return (\r\n            <Form onSubmit={handleSubmit} className=\"form\">\r\n              <FormControl margin=\"normal\" fullWidth>\r\n                <TextField\r\n                  id=\"name\"\r\n                  name=\"name\"\r\n                  label=\"Name\"\r\n                  autoFocus onChange={handleChange}\r\n                  error={errors.name && touched.name}\r\n                  helperText={errors.name && touched.name && errors.name}\r\n                  onChange={(e) => {\r\n                    setBillingDetails({...billingDetails, name: e.target.value});\r\n                  }}\r\n                />\r\n              </FormControl>\r\n              <FormControl margin=\"normal\" fullWidth>\r\n                <TextField id=\"email\" name=\"email\" autoComplete=\"email\"\r\n                  label=\"Email\" \r\n                  onChange={(e) => {\r\n                    setBillingDetails({...billingDetails, email: e.target.value});\r\n                  }}\r\n                  error={errors.email && touched.email}\r\n                  helperText={errors.email && touched.email && errors.email}\r\n                />\r\n              </FormControl>\r\n              <FormControl margin=\"normal\" fullWidth>\r\n                <TextField\r\n                  name=\"phone\"\r\n                  type=\"phone\"\r\n                  id=\"phone\"\r\n                  label=\"Phone Number\" \r\n                  onChange={(e) => {\r\n                    setBillingDetails({...billingDetails, phone: e.target.value});\r\n                  }}\r\n                  error={errors.phone && touched.phone}\r\n                  helperText={errors.phone && touched.phone && errors.phone}\r\n                />\r\n              </FormControl>\r\n              <FormControl margin=\"normal\" fullWidth className={classes.card}>\r\n                <CardField\r\n                  onChange={(e) => {\r\n                    setCardComplete(e.complete);\r\n                  }}\r\n                />\r\n              </FormControl>\r\n              <Grid\r\n                container\r\n                direction=\"row\"\r\n                justify=\"flex-end\"\r\n                alignItems=\"center\"\r\n                spacing={3}\r\n              >\r\n              <Button\r\n                type=\"button\"\r\n                mr={8}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                mt={2}\r\n                onClick={() => setPaymentType('default')}\r\n                disabled={processing || !stripe}\r\n              >\r\n                Back\r\n              </Button>\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                \r\n                color=\"primary\"\r\n                mt={2}\r\n                disabled={processing || !stripe}\r\n              >\r\n                {processing ? 'Processing...' : `Pay $${paymentAmount}`}\r\n              </Button>\r\n              </Grid>\r\n            </Form>\r\n          );\r\n        }}\r\n      </Formik>\r\n    );\r\n}\r\n\r\nPaymentForm.propTypes = {\r\n  userSignUp: PropTypes.func.isRequired,\r\n  isSubmitting: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default PaymentForm;\r\n","import isBoolean from 'lodash/isBoolean';\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { NavLink as RouterNavLink } from \"react-router-dom\";\r\n\r\nimport Helmet from 'react-helmet';\r\n\r\nimport {\r\n  Grid,\r\n  Card as MuiCard,\r\n  CardContent as MuiCardContent,\r\n  Divider as MuiDivider,\r\n  Paper as MuiPaper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Typography\r\n} from \"@material-ui/core\";\r\nimport red from \"@material-ui/core/colors/red\";\r\nimport green from \"@material-ui/core/colors/green\";\r\n\r\nimport { spacing } from \"@material-ui/system\";\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\n\r\nimport { withStyles,makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst NavLink = React.forwardRef((props, ref) => (\r\n  <RouterNavLink innerRef={ref} {...props} />\r\n));\r\n\r\nconst Card = styled(MuiCard)(spacing);\r\n\r\nconst CardContent = styled(MuiCardContent)(spacing);\r\n\r\nconst Divider = styled(MuiDivider)(spacing);\r\n\r\nconst Paper = styled(MuiPaper)(spacing);\r\n\r\nconst CustomTableCell = withStyles(theme => ({\r\n  head: {\r\n    backgroundColor: '#232f3e',\r\n    color: theme.palette.common.white\r\n  },\r\n  body: {\r\n    fontSize: 14\r\n  }\r\n}))(TableCell);\r\n\r\nconst useStyles = makeStyles({\r\n  head: {\r\n    borderBottom: '1px solid #1B2430'\r\n  }\r\n});\r\n\r\nconst CustomTableRow = styled(TableRow)`\r\n  &:nth-of-type(odd) {\r\n    background-color: rgba(0, 0, 0, 0.025);\r\n  }\r\n`;\r\n\r\nconst setIcon = item => {\r\n  return item ? <CheckIcon fontSize={'small'} style={{ color: green[500] }} /> : <ClearIcon fontSize={'small'} style={{ color: red[500] }} />;\r\n}\r\n\r\nfunction CustomizedTableDemo(props) {\r\n  const classes = useStyles();\r\n  const { columns, columnsHeading, title, message, rowsHeading, rows } = props;\r\n  return (\r\n    <Card mb={6}>\r\n      <CardContent pb={1}>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          {title}\r\n        </Typography>\r\n        <Typography variant=\"body2\" gutterBottom>\r\n          {message}\r\n        </Typography>\r\n      </CardContent>\r\n      <Paper>\r\n        <Table>\r\n        <caption>A basic table example with a caption</caption>\r\n          <TableHead>\r\n            <TableRow>\r\n              {columnsHeading.map((column, index) => \r\n                (index ? <CustomTableCell component=\"th\" align=\"center\" className={classes.head}>{column}</CustomTableCell> : <CustomTableCell rowSpan={2} component=\"th\" scope=\"row\">{column}</CustomTableCell>)\r\n              )}\r\n            </TableRow>\r\n            <TableRow>\r\n              {columns.map((column, index) => \r\n                <CustomTableCell align=\"center\" component=\"th\">{column}</CustomTableCell>\r\n              )}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows.map((row, index) => (\r\n              <CustomTableRow key={row.id}>\r\n                {rowsHeading && <CustomTableCell component=\"th\" scope=\"row\">\r\n                  {rowsHeading[index]}\r\n                </CustomTableCell>}\r\n                {row.map((item) => \r\n                  <CustomTableCell align=\"center\">\r\n                  {isBoolean(item) ? setIcon(item) : item}\r\n                  </CustomTableCell>\r\n                )}\r\n              </CustomTableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </Paper>\r\n    </Card>\r\n  );\r\n}\r\n\r\nfunction SimpleTable(props) {\r\n  return (\r\n    <React.Fragment>\r\n      <Helmet title=\"Simple Table\" />\r\n      <Grid container spacing={6}>\r\n        <Grid item xs={12}>\r\n          <CustomizedTableDemo {...props} />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default SimpleTable;\r\n","import React from 'react';\r\nimport CustomizedTable from '../../../pages/tables/CustomizedTable';\r\nimport {\r\n  Typography,\r\n  Button as MuiButton,\r\n} from \"@material-ui/core\";\r\nimport styled from \"styled-components\";\r\nimport { spacing } from \"@material-ui/system\";\r\n\r\nconst Button = styled(MuiButton)(spacing);\r\n\r\nconst rowsHeading = [\r\n  'Data Upload',\r\n  'Taxonomy Upload',\r\n  'Spend Dashboards',\r\n  'Rule Engine',\r\n  'Select'\r\n];\r\n\r\nconst button = (setPaymentType, value) => {\r\n  return (\r\n    <Button\r\n      type=\"submit\"\r\n      fullWidth\r\n      variant=\"contained\"\r\n      color=\"primary\"\r\n      mt={2}\r\n      onClick={() => setPaymentType(value)}\r\n      size=\"small\"\r\n    >\r\n      {'Get Started'}\r\n    </Button>\r\n  )\r\n}\r\nconst rows = setPaymentType => [\r\n  [true, true, true, true],\r\n  [true, true, true, true],\r\n  [true, true, true, true],\r\n  [false, true, true, true],\r\n  [\r\n    button(setPaymentType, 'basic'),\r\n    button(setPaymentType, 'standard'),\r\n    button(setPaymentType, 'basplusic'),\r\n    button(setPaymentType, 'premium'),\r\n  ]\r\n];\r\n\r\nconst columnsHeading = [\r\n  <Typography variant=\"h3\">{'Subscribre Services Plan'}</Typography>,\r\n  'Basic',\r\n  'Standard',\r\n  'Plus',\r\n  'Premium'\r\n];\r\nconst columns = [\r\n  <Typography variant=\"h2\">{'$10'}</Typography>,\r\n  <Typography variant=\"h2\">{'$20'}</Typography>,\r\n  <Typography variant=\"h2\">{'$30'}</Typography>,\r\n  <Typography variant=\"h2\">{'$40'}</Typography>\r\n]\r\n\r\nexport default function PaymentOptions(props) {\r\n  const { setPaymentType } = props;\r\n  return (\r\n    <CustomizedTable\r\n      columns={columns}\r\n      columnsHeading={columnsHeading}\r\n      rowsHeading={rowsHeading}\r\n      rows={rows(setPaymentType)} title=\"We have a plan for everyone\" message=\"One time Payment\" />\r\n  );\r\n}\r\n","import React from 'react';\r\nimport {loadStripe} from '@stripe/stripe-js';\r\nimport { Elements } from '@stripe/react-stripe-js';\r\nimport CheckoutForm from './partials/PaymentForm';\r\nimport PaymentOptions from './partials/PaymentOptions';\r\nimport PaymentIcon from '@material-ui/icons/Payment';\r\nimport {\r\n  Typography,\r\n  makeStyles,\r\n  Divider,\r\n  Paper\r\n} from \"@material-ui/core\";\r\nimport Helmet from 'react-helmet';\r\nimport styled from \"styled-components\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  payment: {\r\n    width: '100%',\r\n    margin: '9% 0%',\r\n    [theme.breakpoints.up('md')]: {\r\n      margin: '1% 0% 3.6%',\r\n    },\r\n  },\r\n  flex: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between'\r\n  },\r\n  divider: {\r\n    margin: theme.spacing(5, 0),\r\n  },\r\n  paymentDiv: {\r\n    padding: theme.spacing(5, 6),\r\n  }\r\n}));\r\n\r\nconst ELEMENTS_OPTIONS = {\r\n  fonts: [\r\n    {\r\n      cssSrc: 'https://fonts.googleapis.com/css?family=Roboto',\r\n    },\r\n  ],\r\n};\r\n\r\n// Make sure to call `loadStripe` outside of a component’s render to avoid\r\n// recreating the `Stripe` object on every render.\r\nconst stripePromise = loadStripe('pk_test_6pRNASCoBOKtIshFeQd4XMUh');\r\n\r\nconst Wrapper = styled(Paper)`\r\n  margin-top: ${props => props.theme.spacing(3)}px;\r\n  padding: ${props => props.theme.spacing(6)}px;\r\n\r\n  ${props => props.theme.breakpoints.up(\"md\")} {\r\n    padding: ${props => props.theme.spacing(10)}px;\r\n  }\r\n`;\r\n\r\nconst Payment = (props) => {\r\n  const { payment, setPaymentType, paymentAmount } = props;\r\n  const [status, setStatus] = React.useState(\"ready\");\r\n  const classes = useStyles();\r\n\r\n  if (status === \"success\") {\r\n    return <div>Congrats on your empanadas!</div>;\r\n  }\r\n\r\n  return (<div className={classes.payment}>\r\n    <Typography variant=\"h3\" gutterBottom display=\"inline\">\r\n      {paymentAmount === '0' ? 'Payment' : 'Checkout'}\r\n    </Typography>\r\n    <Divider className={classes.divider} />\r\n    {paymentAmount === '0' ? <div>\r\n      <PaymentOptions setPaymentType={setPaymentType} />\r\n    </div> :\r\n    <div className={classes.paymentDiv}>\r\n      <div className={classes.flex}>\r\n        <div className={classes.flex}><PaymentIcon /><Typography variant=\"h4\">Choose Payment Option</Typography></div>\r\n        <Typography variant=\"h4\">Pay only ${paymentAmount}</Typography>\r\n      </div>\r\n      <Wrapper>\r\n        <Helmet title=\"Payment\" />\r\n        <Elements stripe={stripePromise} options={ELEMENTS_OPTIONS}>\r\n          <CheckoutForm payment={payment} paymentAmount={paymentAmount} setPaymentType={setPaymentType} />\r\n        </Elements>\r\n      </Wrapper>\r\n    </div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Payment;\r\n","import * as action from './payment.actionCreators';\r\nimport api from '../../common/api';\r\n\r\nexport const payment = payload => (dispatch) => {\r\n  dispatch(action.paymentRequest());\r\n  return api({\r\n    method: 'post',\r\n    url: 'v1/payment',\r\n    data: payload\r\n  })\r\n    .then((response) => {\r\n      const { data } = response;\r\n      dispatch(action.paymentSuccess(data));\r\n    })\r\n    .catch((err) => {\r\n      dispatch(action.paymentError(err));\r\n    });\r\n};\r\n\r\nexport const setPaymentType = payload => (dispatch) => {\r\n  dispatch(action.setPaymentType(payload));\r\n}\r\n","import * as Types from './payment.actionTypes';\r\n\r\nexport const paymentRequest = () => ({\r\n  type: Types.PAYMENT_REQUEST\r\n});\r\n\r\nexport const paymentSuccess = payload => ({\r\n  type: Types.PAYMENT_SUCCESS,\r\n  payload\r\n});\r\n\r\nexport const paymentError = payload => ({\r\n  type: Types.PAYMENT_ERROR,\r\n  payload\r\n});\r\n\r\nexport const setPaymentType = payload => ({\r\n  type: Types.SET_PAYMENT_TYPE,\r\n  payload\r\n})","import { connect } from 'react-redux';\r\nimport Payment from './Payment';\r\nimport { payment, setPaymentType } from './payment.actions';\r\n\r\nconst mapStateToProps = state => ({\r\n  //formStatus: state.login.loginMessage.formStatus,\r\n  //isSubmitting: state.login.loginUi.isSubmitting,\r\n  paymentAmount: state.payment.paymentStore.paymentAmount\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  payment: payload => dispatch(payment(payload)),\r\n  setPaymentType: payload => dispatch(setPaymentType(payload))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Payment);\r\n"],"sourceRoot":""}