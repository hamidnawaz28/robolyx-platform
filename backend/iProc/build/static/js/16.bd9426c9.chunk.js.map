{"version":3,"sources":["global/table/table.actionCreators.js","global/table/table.actions.js","global/dropDownSelect.js","global/table/table.table.js","global/utils/utils.actions.js","global/utils/utils.actionsCreators.js","../node_modules/@material-ui/icons/Search.js","../node_modules/@material-ui/icons/RotateLeft.js","main/spendanalysis/Components/ruleengine/invoicebyrule/InvoiceByRule.jsx"],"names":["updateTableData","data","type","payload","updatePerPage","updateCurrentPage","updateTotalRows","updateFormQuery","selectAll","resetStates","queryData","credentials","apiData","dispatch","axios","get","SERVER_URL","params","then","res","serviceData","JSON","parse","forEach","element","push","count","catch","error","alert","deleteData","delApiData","fetchApiData","delete","updateData","updateApiData","put","postData","postApiData","post","implementRule","TEST_AND_IMPLEMENT_RULE","e","DropDownSelect","props","Lists","dataList","dataType","DataType","fieldName","label","selectedValue","onChangeEvent","catagoryLevel","allOptions","map","ListItem","pk","className","Object","keys","item","key","fields","SensitivityLevel","value","fullWidth","htmlFor","native","inputProps","id","onChange","event","onSelect","aria-label","useStyles","makeStyles","actionButtons","actionButtonsMargin","tableWrap","headRow","bodyRows","headCells","bodyCells","noData","styled","Grid","TableData","classes","useDispatch","tableStates","useSelector","state","totalRows","perPage","currentPage","IsAllSelected","query","tableHeaders","selectOption","paginationOption","apiLink","addNewDataHandle","editDataHandle","ruleImpEnabled","isActionsEnabled","singleSelectHandle","target","parentElement","getAttribute","tableDataPrev","updatedData","index","stringify","project","deleteApiData","implementApiData","useEffect","color","m","variant","onClick","pkArray","length","implementRuleHandle","startIcon","outArray","editData","deleteDataHandle","stickyHeader","size","checked","checkedStatus","SingleHeader","row","hover","IsChecked","component","rowsPerPageOptions","rowsPerPage","page","onChangePage","currPage","currentTarget","ariaLabel","onChangeRowsPerPage","newTablePerPage","updateTaxonomyCategories","UTILS","updateDraftRulesPK","updateImplementedRulesPK","updateInvoicesPk","updateRolesList","_interopRequireDefault","require","defineProperty","exports","default","_react","_default","createElement","d","InvoiceByRule","initialState","CATEGORY_LEVEL_ONE","CATEGORY_LEVEL_TWO","CATEGORY_LEVEL_THREE","CATEGORY_LEVEL_FOUR","CATEGORY_LEVEL_FIVE","React","useState","formData","setFormData","categoriesData","utilsData","implementedRulesPk","draftedRulesPk","p","style","backgroundColor","marginBottom","container","spacing","width","INVOICE_BY_RULE","xs","sm","md","lg","xl","margin","DATA_ATTRIBUTES_FOR_COLUMNS"],"mappings":"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","file":"static/js/16.bd9426c9.chunk.js","sourcesContent":["import * as type from './table.actionTypes'\r\nexport const updateTableData=(data)=>(\r\n    {\r\n        type: type.TABLE_DATA,\r\n        payload: data\r\n    }\r\n);\r\nexport const updatePerPage=(data)=>(\r\n    {\r\n        type: type.PER_PAGE,\r\n        payload: data\r\n    }\r\n);\r\nexport const updateCurrentPage=(data)=>(\r\n    {\r\n        type: type.CURRENT_PAGE,\r\n        payload: data\r\n    }\r\n);\r\nexport const updateTotalRows=(data)=>(\r\n    {\r\n        type: type.TOTAL_ROWS,\r\n        payload: data\r\n    }\r\n);\r\nexport const updateFormQuery = (data) => (\r\n    {\r\n        type : type.FORM_QUERY,\r\n        payload : data\r\n    }\r\n);\r\nexport const selectAll=(data)=>(\r\n    {\r\n        type: type.IS_ALL_SELECTED,\r\n        payload: data\r\n    }\r\n);\r\nexport const resetStates=(data)=>({\r\n    type :type.RESET_STATES,\r\n    payload:''\r\n})","import axios from 'axios'\r\nimport { useDispatch } from 'react-redux'\r\nimport {\r\n    SERVER_URL,\r\n    TEST_AND_IMPLEMENT_RULE\r\n} from '../constants'\r\nimport { \r\n    updateTableData, \r\n    updateTotalRows, \r\n    updatePerPage, \r\n    updateCurrentPage, \r\n    selectAll \r\n} from './table.actionCreators'\r\nconst queryData = (credentials, apiData ) => {\r\n        return dispatch => {\r\n            axios\r\n                .get(`${SERVER_URL}${credentials}`, { params : apiData })\r\n                .then((res)=>{\r\n                    let serviceData = JSON.parse(res.data.queryData);\r\n                    let data = []\r\n                    serviceData.forEach(element => {\r\n                        element[\"IsChecked\"] = false\r\n                        data.push(element)\r\n                    });\r\n                    dispatch(updateTableData(data))\r\n                    dispatch(updateTotalRows(res.data.count))\r\n                    //  dispatch(IsUpdating(false))\r\n                })\r\n                .catch((error)=>{\r\n                    alert(error)\r\n                    // dispatch(IsUpdating(false))\r\n                    // dispatch(FetchError(true))\r\n                })\r\n        }\r\n}\r\n\r\nconst deleteData = (credentials, delApiData, fetchApiData) =>{\r\n        return dispatch => {\r\n            axios\r\n                .delete(`${SERVER_URL}${credentials}`, { params : delApiData })\r\n                .then((res)=>{\r\n                    alert(res.data)\r\n                    dispatch( queryData( credentials, fetchApiData ))\r\n                    //  dispatch(IsUpdating(false))\r\n                })\r\n                .catch((error)=>{\r\n                    alert(error)\r\n                })\r\n        }\r\n}\r\nconst updateData = ( credentials , updateApiData , fetchApiData ) =>{\r\n    return dispatch => {\r\n        axios\r\n            .put(`${SERVER_URL}${credentials}`, { params : updateApiData })\r\n            .then((res)=>{\r\n                alert(res.data)\r\n                dispatch( queryData( credentials, fetchApiData ))\r\n                //  dispatch(IsUpdating(false))\r\n            })\r\n            .catch((error)=>{\r\n                alert(error)\r\n            })\r\n    }\r\n}\r\nconst postData = ( credentials , postApiData, fetchApiData ) =>{\r\n    return dispatch => {\r\n        axios\r\n            .post(`${SERVER_URL}${credentials}`, { params : postApiData })\r\n            .then((res)=>{\r\n                alert(res.data)\r\n                dispatch( queryData( credentials, fetchApiData ))\r\n                //  dispatch(IsUpdating(false))\r\n            })\r\n            .catch((error)=>{\r\n                alert(error)\r\n            })\r\n    }\r\n}\r\nconst implementRule = (credentials, postApiData, fetchApiData)=>{\r\n    return dispatch =>{\r\n        axios.post(`${SERVER_URL}${TEST_AND_IMPLEMENT_RULE}/`,{ params : postApiData})\r\n        .then((res)=>{\r\n            alert(res.data)\r\n            dispatch( queryData( credentials, fetchApiData ))\r\n        })\r\n        .catch((e)=>{\r\n            alert(e)\r\n        })\r\n    }\r\n}\r\nexport { deleteData, queryData, updateData, postData, implementRule }","// import * as All from '../Global/actions';\r\nimport React from 'react';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nfunction DropDownSelect(props) {\r\n        const { \r\n            dataList : Lists, \r\n            DataType : dataType, \r\n            fieldName, \r\n            label, \r\n            selectedValue, \r\n            onChangeEvent,\r\n            catagoryLevel\r\n        } = props\r\n        let allOptions = '';\r\n        if (Lists) {\r\n            if (dataType === \"KeyValue\") {\r\n                allOptions = Lists.map((ListItem) => <option pk={ListItem[\"pk\"]} className=\"selectOption\">{ListItem[\"name\"]}</option>);\r\n            }\r\n            if (dataType === \"ListData\") {\r\n                allOptions = Lists.map((ListItem) => <option pk={ListItem} className=\"selectOption\">{ListItem}</option>);\r\n            }\r\n            if (dataType === \"ListDataWithCatagory\") {\r\n                allOptions = Lists.map((ListItem) => <option catagoryLevel ={catagoryLevel} pk={ListItem} className=\"selectOption\">{ListItem}</option>);\r\n            }\r\n            if (dataType === \"ListDataWithFieldName\") {\r\n                allOptions = Lists.map((ListItem) => <option fieldName ={fieldName} pk={ListItem} className=\"selectOption\">{ListItem}</option>);\r\n            }\r\n            if(dataType===\"GroupDataWithType\"){\r\n                allOptions = Object.keys(Lists).map((ListItem) => \r\n                Lists[ListItem].map((item)=><option dataType={ListItem}  className=\"selectOption\">{item}</option>)\r\n                );\r\n            }\r\n            if (dataType === \"WithPkAndFieldName\") {\r\n                allOptions = Lists.map((ListItem) => \r\n                <option key={ListItem.pk} pk={ListItem.pk} \r\n                    className=\"selectOption\">{(ListItem ?.fields?.[fieldName])?\r\n                                                ListItem.fields[fieldName]:<></>}\r\n                </option>);\r\n            }\r\n            if(dataType === \"GroupData\"){\r\n                let SensitivitiesLevels = Object.keys(Lists)\r\n                allOptions = SensitivitiesLevels.map((SensitivityLevel) =>\r\n                    <optgroup label={SensitivityLevel} className={SensitivityLevel+\"Options\"}>\r\n                            {\r\n                                Object.keys(Lists[SensitivityLevel]).map((data)=>\r\n                                    <>\r\n                                        { Lists[SensitivityLevel][data].map((value)=>\r\n                                            <option \r\n                                                data=\r\n                                                    {[\r\n                                                        SensitivityLevel,data,value\r\n                                                    ]}>\r\n                                                {value}\r\n                                            </option>\r\n                                        )}\r\n                                    </>\r\n                                )\r\n                            }\r\n                    </optgroup>)\r\n            }\r\n        }\r\n        return (\r\n            <>\r\n                <FormControl fullWidth>\r\n                    <InputLabel htmlFor=\"outlined-native-simple\" > \r\n                        {label} \r\n                    </InputLabel>\r\n                    <Select \r\n                        native \r\n                        inputProps={{\r\n                            id: 'filled-native-simple',\r\n                          }}\r\n                        label=\"Default Templetes\" \r\n                        value={selectedValue} \r\n                        onChange={(event) => onChangeEvent(event)} \r\n                        onSelect={(event) => onChangeEvent(event)} \r\n                        className=\"selectInput\">\r\n                        <option aria-label=\"None\" value=\"\"></option>\r\n                        {allOptions}\r\n                    </Select>\r\n                </FormControl>\r\n        </>\r\n    )\r\n}\r\nexport default DropDownSelect;\r\n","import React, { useEffect } from 'react';\r\nimport {\r\n    Table, \r\n    TableBody, \r\n    TableCell, \r\n    TableHead,\r\n    TableRow, \r\n    Paper, \r\n    TablePagination, \r\n    Checkbox,\r\n    CardMedia, \r\n    Card, \r\n    Typography\r\n} from '@material-ui/core'\r\nimport { \r\n    connect, \r\n    useDispatch, \r\n    useSelector \r\n} from 'react-redux'\r\nimport { \r\n    updateTableData, \r\n    updatePerPage, \r\n    updateCurrentPage, \r\n    updateTotalRows, \r\n    selectAll \r\n} from './table.actionCreators'\r\nimport styled from 'styled-components';\r\nimport { Button, Box, Grid } from '@material-ui/core'\r\nimport { DeleteOutline, Add, Edit} from '@material-ui/icons'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { queryData, deleteData, implementRule } from \"./table.actions\"\r\nimport { resetStates } from './table.actionCreators'\r\nconst useStyles = makeStyles({\r\n    actionButtons : {\r\n        \"paddingTop\" : \"5px\",\r\n        \"paddingLeft\" : \"22px\"\r\n    },\r\n    actionButtonsMargin : {\r\n        \"marginRight\" : \"10px\"\r\n    },\r\n    tableWrap : {\r\n        \"maxWidth\": \"1025px\", \r\n        \"overflow\": \"auto\" \r\n    },\r\n    headRow : {\r\n        \"borderRadius\" : \"15px 50px 30px 5px\", \r\n        \"height\" : \"10px\",\r\n        \"backgroundColor\": \"white\"\r\n    },\r\n    bodyRows : {\r\n        \"height\": \"10px\", \r\n        \"padding\": \"0px\"\r\n    },\r\n    headCells : {\r\n        \"backgroundColor\": \"white\", \r\n        \"color\": \"black\", \r\n        \"fontSize\": \"12px\",\r\n        \"textAlign\": \"left\"\r\n    },\r\n    bodyCells : {\r\n        \"fontSize\": \"11px\",\r\n        \"textAlign\": \"left\"\r\n    },\r\n    noData : {\r\n        \"textAlign\" : \"center\",\r\n        \"margin\" : \"20px\"\r\n    }\r\n})\r\nconst ActionsGrid = styled(Grid)`\r\n    paddingTop : \"5px\",\r\n    paddingLeft : \"22px\"\r\n`\r\n// const styles = theme => ({\r\n//     root: {\r\n//         width: '100%',\r\n//         marginTop: theme.spacing.unit * 3,\r\n//         overflowX: 'auto',\r\n//     },\r\n//     table: {\r\n//         minWidth: 700,\r\n//     },\r\n// });\r\nconst selRowsArr = (rowsData)=> {\r\n    let outArray = []\r\n        for (let index in rowsData) {\r\n            if (rowsData[index]['IsChecked'] == true) {\r\n                outArray.push(rowsData[index])\r\n            }\r\n        }\r\n    return outArray\r\n}\r\nfunction TableData(props) {\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const tableStates = useSelector(state => state.tableStates)\r\n    const { data, totalRows, perPage, currentPage, IsAllSelected, query } = tableStates\r\n    const { \r\n        tableHeaders, \r\n        selectOption, \r\n        paginationOption, \r\n        apiLink , \r\n        addNewDataHandle, \r\n        editDataHandle, \r\n        isActionsEnabled,\r\n        ruleImpEnabled\r\n    } = props\r\n    \r\n    const selectAllHandle = (e) => {\r\n        const checkedStatus = e.target.checked\r\n        dispatch(selectAll(checkedStatus))\r\n        let tableDataPrev = data;\r\n        let updatedData = [];\r\n        for (let index in tableDataPrev) {\r\n            let item = { ...tableDataPrev[index] };\r\n            item['IsChecked'] = checkedStatus\r\n            updatedData.push(item)\r\n        }\r\n        dispatch(updateTableData(updatedData))\r\n    }\r\n    const singleSelectHandle = (e) => {\r\n        debugger;\r\n        let pk = e.target.parentElement.parentElement.getAttribute(\"pk\")\r\n        if (pk == null) {\r\n            pk = e.target.parentElement.getAttribute(\"pk\")\r\n        }\r\n        let tableDataPrev = data;\r\n        let updatedData = [];\r\n        for (let index in tableDataPrev) {\r\n            let item = { ...tableDataPrev[index] };\r\n            if(item['pk'] == pk){\r\n                item['IsChecked'] = !item['IsChecked']\r\n            }\r\n            updatedData.push(item)\r\n        }\r\n        dispatch(updateTableData(updatedData))\r\n    }\r\n    let fetchApiData = {\r\n        query : JSON.stringify(query),\r\n        currentPage : currentPage,\r\n        perPage : perPage,\r\n        project : \"1\",\r\n    }\r\n    let deleteApiData = {\r\n        project : \"1\",\r\n    }\r\n    let implementApiData = {\r\n        project : \"1\"\r\n    }\r\n    const deleteDataHandle = () => {\r\n        let pkArray = [];\r\n        for (let index in data) {\r\n            if (data[index]['IsChecked'] == true) {\r\n                pkArray.push(data[index]['pk'])\r\n            }\r\n        }\r\n        deleteApiData[\"pkArray\"] = JSON.stringify(pkArray)\r\n        pkArray.length >0?\r\n            dispatch( deleteData( apiLink, deleteApiData, fetchApiData ))\r\n            :alert(\"Select Data\")\r\n    }\r\n    const editData = () => {\r\n        let outArray = []\r\n        for (let index in data) {\r\n            if (data[index]['IsChecked'] == true) {\r\n                outArray.push(data[index])\r\n            }\r\n        }\r\n        outArray.length>1 || outArray.length==0\r\n        ? alert(\"Select A single Row\")\r\n        : editDataHandle(outArray[0])\r\n    }\r\n    const implementRuleHandle = () =>{\r\n        let pkArray = [];\r\n        for (let index in data) {\r\n            if (data[index]['IsChecked'] == true) {\r\n                pkArray.push(data[index]['pk'])\r\n            }\r\n        }\r\n        implementApiData[\"pkArray\"] = JSON.stringify(pkArray)\r\n        fetchApiData[\"STATUS\"] = 'draft'\r\n        pkArray.length >0?\r\n            dispatch( implementRule( apiLink, implementApiData, fetchApiData ))\r\n            :alert(\"Select Data\")\r\n    }\r\n    const changePageHandle = (e) => {\r\n        let currPage = currentPage\r\n        e.currentTarget.ariaLabel == \"Next page\" ? currPage += 1 : currPage -= 1\r\n        dispatch(updateCurrentPage(currPage))\r\n        fetchApiData['currentPage'] = currPage\r\n        dispatch(queryData( apiLink, fetchApiData ))\r\n    }\r\n    const changeRowsPerPageHandle = (e) => {\r\n        let newTablePerPage = e.target.value;\r\n        dispatch(updatePerPage(newTablePerPage))\r\n        dispatch(updateCurrentPage(0))\r\n        fetchApiData['perPage'] = newTablePerPage\r\n        fetchApiData['currentPage'] = 0\r\n        dispatch(queryData( apiLink, fetchApiData ))\r\n    }\r\n    useEffect( () => { \r\n        dispatch( queryData( apiLink, fetchApiData ))\r\n        return ()=>{\r\n            dispatch(resetStates())\r\n        }\r\n    },[])\r\n    const variant = 'contained'\r\n    const color = 'primary'\r\n    return (\r\n        <Paper>\r\n            {  selectOption &&\r\n                <div className = {classes.actionButtons}>\r\n                    <Box m={1} >\r\n                        {   \r\n                            ruleImpEnabled &&\r\n                            <Button\r\n                                color={color}\r\n                                variant={variant}\r\n                                // startIcon={<DeleteOutline />}\r\n                                onClick={() => implementRuleHandle()}\r\n                                className={classes.actionButtonsMargin}\r\n                            >\r\n                            Implement\r\n                            </Button>\r\n                        }\r\n                        <Button\r\n                            color={color}\r\n                            variant={variant}\r\n                            startIcon={<Add />}\r\n                            onClick={() => addNewDataHandle()}\r\n                            className={classes.actionButtonsMargin}\r\n                        >\r\n                        Add\r\n                        </Button>\r\n                        <Button\r\n                            color={color}\r\n                            variant={variant}\r\n                            startIcon={<Edit/>}\r\n                            onClick={() => editData()}\r\n                            className={classes.actionButtonsMargin}\r\n                        >\r\n                        Edit\r\n                        </Button>\r\n                        <Button\r\n                            color={color}\r\n                            variant={variant}\r\n                            startIcon={<DeleteOutline />}\r\n                            onClick={() => deleteDataHandle()}\r\n                            className={classes.actionButtonsMargin}\r\n                        >\r\n                        Delete\r\n                        </Button>\r\n                    </Box>\r\n                </div>\r\n            }\r\n            \r\n            <div className = {classes.tableWrap}>\r\n                <Table \r\n                    stickyHeader \r\n                    aria-label=\"sticky table\" \r\n                    size=\"small\" \r\n                    className = {classes.tableWrap}>\r\n                    <TableHead>\r\n                        <TableRow className={classes.headRow}>\r\n                            {   selectOption && \r\n                                    <TableCell className={classes.headCells} >\r\n                                        <Checkbox \r\n                                            color={color} \r\n                                            checked={IsAllSelected}\r\n                                            onClick={selectAllHandle} \r\n                                        />\r\n                                    </TableCell>\r\n                            }\r\n                            <TableCell className={classes.headCells} >ID</TableCell>\r\n                            {Object.keys(tableHeaders).map(SingleHeader =>\r\n                                <TableCell \r\n                                    className={classes.headCells} \r\n                                >\r\n                                    {SingleHeader}\r\n                                </TableCell>\r\n                            )}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        \r\n                        {data.length > 0 && data.map(row => (\r\n                            <TableRow \r\n                                className={classes.bodyRows} \r\n                                hover={true}\r\n                                onClick={ selectOption && singleSelectHandle}\r\n                                pk={row.pk}\r\n                                checked={row.IsChecked}\r\n                            >\r\n                                {\r\n                                    selectOption &&\r\n                                        <TableCell>\r\n                                            <Checkbox \r\n                                                color={color} \r\n                                                pk={row.pk} \r\n                                                checked={row.IsChecked}\r\n                                            />\r\n                                        </TableCell>\r\n                                }\r\n                                {row?.pk && <TableCell>{row.pk}</TableCell>}\r\n                                {\r\n                                    Object.keys(tableHeaders).map(key =>\r\n                                        <TableCell \r\n                                            className ={ classes.bodyCells }\r\n                                        >\r\n                                        {row.fields[tableHeaders[key]]}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                            </TableRow>\r\n                        )) }\r\n                    </TableBody>\r\n                </Table>\r\n                {\r\n                    data.length == 0 && \r\n                        <Card className={classes.noData}>\r\n                            <Typography  component=\"h2\">\r\n                                No Data\r\n                            </Typography>\r\n                        </Card>\r\n                }\r\n            </div>\r\n            {\r\n                paginationOption &&\r\n                <TablePagination\r\n                    rowsPerPageOptions={[3, 5, 10, 25,50, 100,500]}\r\n                    component=\"div\"\r\n                    count={totalRows}\r\n                    rowsPerPage={perPage}\r\n                    page={currentPage}\r\n                    onChangePage={changePageHandle}\r\n                    onChangeRowsPerPage={changeRowsPerPageHandle}\r\n                />\r\n            }\r\n        </Paper>\r\n    );\r\n}\r\n\r\nexport default TableData;\r\n","import axios from 'axios'\r\nimport { useDispatch } from 'react-redux'\r\nimport { getTaxonomyCategories, getDraftedRulesPk, getImplementedRulesPk, getAllInvoicesPk, getRolesList } from './utils.actionsCreators'\r\nimport {\r\n    SERVER_URL,\r\n    UTILS\r\n} from '../constants'\r\nconst projectKey = '1'\r\nconst updateTaxonomyCategories = () => {\r\n    return dispatch => {\r\n        axios\r\n            .get(\r\n                `${SERVER_URL}${UTILS}`,\r\n                {\r\n                    params:{\r\n                        type: \"TaxonomyCategories\",\r\n                        project: projectKey\r\n                    }\r\n                }\r\n            )\r\n            .then((res) => {\r\n                dispatch(getTaxonomyCategories(res.data))\r\n            })\r\n            .catch((error) => {\r\n                alert(error)\r\n            })\r\n    }\r\n}\r\n\r\nconst updateDraftRulesPK = () => {\r\n    return dispatch => {\r\n        axios\r\n            .get(\r\n                `${SERVER_URL}${UTILS}`,\r\n                {\r\n                    params:{\r\n                        type: \"DraftRulesPK\",\r\n                        project: projectKey\r\n                    }\r\n                }\r\n            )\r\n            .then((res) => {\r\n                dispatch(getDraftedRulesPk(res.data))\r\n            })\r\n            .catch((error) => {\r\n                alert(error)\r\n            })\r\n    }\r\n}   \r\nconst updateImplementedRulesPK = () => {\r\n    return dispatch => {\r\n        axios\r\n            .get(\r\n                `${SERVER_URL}${UTILS}`,\r\n                {\r\n                    params:{\r\n                        type: \"ImplementedRulesPK\",\r\n                        project: projectKey\r\n                    }\r\n                }\r\n            )\r\n            .then((res) => {\r\n                dispatch(getImplementedRulesPk(res.data))\r\n            })\r\n            .catch((error) => {\r\n                alert(error)\r\n            })\r\n    }\r\n}   \r\nconst updateInvoicesPk = () => {\r\n    return dispatch => {\r\n        axios\r\n            .get(\r\n                `${SERVER_URL}${UTILS}`,\r\n                {\r\n                    params:{\r\n                        type: \"InvoicesPK\",\r\n                        project: projectKey\r\n                    }\r\n                }\r\n            )\r\n            .then((res) => {\r\n                dispatch(getAllInvoicesPk(res.data))\r\n            })\r\n            .catch((error) => {\r\n                alert(error)\r\n            })\r\n    }\r\n}   \r\nconst updateRolesList = () => {\r\n    return dispatch => {\r\n        axios\r\n            .get(\r\n                `${SERVER_URL}${UTILS}`,\r\n                {\r\n                    params:{\r\n                        type: \"RolesList\",\r\n                        project: projectKey\r\n                    }\r\n                }\r\n            )\r\n            .then((res) => {\r\n                dispatch(getRolesList(res.data))\r\n            })\r\n            .catch((error) => {\r\n                alert(error)\r\n            })\r\n    }\r\n} \r\nexport { updateTaxonomyCategories, updateDraftRulesPK, updateImplementedRulesPK, updateInvoicesPk, updateRolesList }\r\n","import * as type from './utils.actionTypes'\r\n\r\nexport const getTaxonomyCategories=(data)=>(\r\n    {\r\n        type: type.GET_TAXONOMY_CATEGORIES,\r\n        payload: data\r\n    }\r\n);\r\nexport const getDraftedRulesPk=(data)=>(\r\n    {\r\n        type: type.DRAFTED_RULES_PK,\r\n        payload: data\r\n    }\r\n);\r\nexport const getImplementedRulesPk=(data)=>(\r\n    {\r\n        type: type.IMPLEMENTED_RULES_PK,\r\n        payload: data\r\n    }\r\n);\r\nexport const getAllInvoicesPk=(data)=>(\r\n    {\r\n        type: type.ALL_INVOICES_PK,\r\n        payload: data\r\n    }\r\n);\r\nexport const getRolesList=(data)=>(\r\n    {\r\n        type: type.ALL_ROLES_LIST,\r\n        payload: data\r\n    }\r\n);","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"\n}), 'Search');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M7.11 8.53L5.7 7.11C4.8 8.27 4.24 9.61 4.07 11h2.02c.14-.87.49-1.72 1.02-2.47zM6.09 13H4.07c.17 1.39.72 2.73 1.62 3.89l1.41-1.42c-.52-.75-.87-1.59-1.01-2.47zm1.01 5.32c1.16.9 2.51 1.44 3.9 1.61V17.9c-.87-.15-1.71-.49-2.46-1.03L7.1 18.32zM13 4.07V1L8.45 5.55 13 10V6.09c2.84.48 5 2.94 5 5.91s-2.16 5.43-5 5.91v2.02c3.95-.49 7-3.85 7-7.93s-3.05-7.44-7-7.93z\"\n}), 'RotateLeft');\n\nexports.default = _default;","import React, { useState, useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport {\r\n    RULE_ENGINE_OPERATORS,\r\n    PRIORITY_LIST,\r\n    SERVER_URL,\r\n    DATA_COLUMNS,\r\n    TAXONOMY_DATA,\r\n    RULE_ENGINE,\r\n    DATA_ATTRIBUTES_WITH_TYPE,\r\n    RULE_ENGINE_DATA,\r\n    INVOICE_BY_RULE,\r\n    DATA_ATTRIBUTES_FOR_COLUMNS,\r\n} from \"../../../../../global/constants\";\r\nimport { queryData } from '../../../../../global/table/table.actions'\r\nimport Table from '../../../../../global/table/table.table'\r\nimport { \r\n    updateTaxonomyCategories,\r\n    updateDraftRulesPK,\r\n    updateImplementedRulesPK\r\n } from '../../../../../global/utils/utils.actions.js'\r\nimport DropDownSelect from \"../../../../../global/dropDownSelect\"\r\nfunction InvoiceByRule() {\r\n    //////////////////////////////////////Constants//////////////////////\r\n    const CATAGORIES = [\"ONE\", \"TWO\", \"THREE\", \"FOUR\", \"FIVE\"]\r\n    ////////////////////////////////////// Page States//////////////////////\r\n    let initialState = {\r\n        CATEGORY_LEVEL_ONE: '',\r\n        CATEGORY_LEVEL_TWO: '',\r\n        CATEGORY_LEVEL_THREE: '',\r\n        CATEGORY_LEVEL_FOUR: '',\r\n        CATEGORY_LEVEL_FIVE: '',\r\n        pk: ''\r\n    }\r\n    const [formData, setFormData] = React.useState(initialState);\r\n    const categoriesData = useSelector(state => state.utilsData.categoriesData)\r\n    const implementedRulesPk = useSelector(state => state.utilsData.implementedRulesPk)\r\n    const draftedRulesPk = useSelector(state => state.utilsData.draftedRulesPk)\r\n    const tableStates = useSelector(state => state.tableStates)\r\n    const { perPage, currentPage } = tableStates\r\n    const dispatch = useDispatch()\r\n    /////////////////////////////////////////// Form Events/////////////////////////////\r\n    let fetchApiData = {\r\n        currentPage: currentPage,\r\n        perPage: perPage,\r\n        project: '1'\r\n    }\r\n    const resetQueryHandle = () => {\r\n        setFormData(initialState)\r\n        fetchApiData[\"query\"] = JSON.stringify(initialState)\r\n        dispatch(queryData(INVOICE_BY_RULE, fetchApiData))\r\n    }\r\n    const searchQueryHandle = () => {\r\n        fetchApiData[\"query\"] = JSON.stringify(formData)\r\n        dispatch(queryData(INVOICE_BY_RULE, fetchApiData))\r\n    }\r\n    const ruleEvent = (e) => {\r\n        fetchApiData[\"query\"] = JSON.stringify(formData)\r\n        formData.pk != ''?\r\n        dispatch(queryData(INVOICE_BY_RULE, fetchApiData)):alert(\"Select Rule\")\r\n    }\r\n    //////////////////////////////////////////////////////////////////////////////////////\r\n    ////////////////////////////////////////Life Cycle Events/////////////////////////////\r\n    useEffect(() => {\r\n        dispatch(updateTaxonomyCategories())\r\n        dispatch(updateDraftRulesPK())\r\n        dispatch(updateImplementedRulesPK())\r\n    }, [])\r\n    return (\r\n        <>  \r\n            <Box p={1} style = {{backgroundColor :\"white\" , marginBottom :\"10px\"}}>\r\n                <Box p={1}>\r\n                    <Grid container spacing={0}>\r\n                        <Grid style={{ width: \"100px\" }}>\r\n                            <DropDownSelect\r\n                                dataList={implementedRulesPk}\r\n                                label={\"Rules\"}\r\n                                DataType=\"ListData\"\r\n                                selectedValue={formData.pk}\r\n                                onChangeEvent=\r\n                                {(e) => setFormData({...initialState,\r\n                                    pk: e.target.value})}\r\n                            />\r\n                        </Grid>\r\n                        <Grid>\r\n                            <IconButton aria-label=\"search\" variant=\"outlined\"  color=\"primary\">\r\n                                <SearchIcon onClick = {(e) => ruleEvent(e)}/>\r\n                            </IconButton>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n                <Box>\r\n                    <Grid container spacing={0}>\r\n                        <Grid container xs={6} sm={6} md={9} lg={9} xl={9}>\r\n                            {CATAGORIES.map((item, index) =>\r\n                                <Grid xs={6} sm={6} md={2} lg={2} xl={2} >\r\n                                    <Box m={1}>\r\n                                        <DropDownSelect\r\n                                            dataList={categoriesData[`CATEGORY_LEVEL_${item}`]}\r\n                                            label={\"LEVEL_\" + (index + 1)}\r\n                                            DataType=\"ListData\"\r\n                                            selectedValue={formData[`CATEGORY_LEVEL_${item}`]}\r\n                                            onChangeEvent={(e) => setFormData({ ...formData, [`CATEGORY_LEVEL_${item}`]: e.target.value, pk: '' })}\r\n                                        />\r\n                                    </Box>\r\n                                </Grid>\r\n                            )}\r\n                        </Grid>\r\n                        <Grid container xs={6} sm={6} md={3} lg={3} xl={3}>\r\n                            <Grid xs={6} sm={6} md={6} lg={6} xl={6}>\r\n                                <Button\r\n                                    color=\"primary\"\r\n                                    variant=\"contained\"\r\n                                    style={{ margin: \"10px 10px 10px 10px\" }}\r\n                                    startIcon={<SearchIcon />}\r\n                                    onClick={(e) => searchQueryHandle()}\r\n                                >\r\n                                    Search\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid xs={6} sm={6} md={6} lg={6} xl={6}>\r\n                                <Button\r\n                                    color=\"primary\"\r\n                                    variant=\"contained\"\r\n                                    style={{ margin: \"10px 10px 10px 10px\" }}\r\n                                    startIcon={<RotateLeftIcon />}\r\n                                    onClick={() => resetQueryHandle()}\r\n                                >\r\n                                    Reset\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            </Box>\r\n            <Table\r\n                tableHeaders={DATA_ATTRIBUTES_FOR_COLUMNS}\r\n                selectOption={false}\r\n                paginationOption={true}\r\n                apiLink={INVOICE_BY_RULE}\r\n            />\r\n        </>\r\n    );\r\n}\r\nexport default InvoiceByRule"],"sourceRoot":""}