{"version":3,"sources":["global/table/table.actionCreators.js","global/table/table.actions.js","global/dropDownSelect.js","global/table/table.table.js","global/utils/utils.actions.js","global/utils/utils.actionsCreators.js","global/progress/Progress.js","main/spendanalysis/Components/uploadandmap/map/actionCreators.js","main/spendanalysis/Components/uploadandmap/map/actions.js","main/spendanalysis/Components/uploadandmap/UploadAndMapDataForm.jsx","main/spendanalysis/Components/uploadandmap/UploadAndMapQueryForm.jsx","main/spendanalysis/Components/uploadandmap/upload/actionCreators.js","main/spendanalysis/Components/uploadandmap/upload/actions.js","main/spendanalysis/Components/uploadandmap/Upload.jsx","main/spendanalysis/Components/uploadandmap/UploadAndMap.jsx"],"names":["updateTableData","data","type","payload","updatePerPage","updateCurrentPage","updateTotalRows","updateFormQuery","selectAll","resetStates","queryData","credentials","apiData","dispatch","axios","get","SERVER_URL","params","then","res","serviceData","JSON","parse","forEach","element","push","count","catch","error","alert","deleteData","delApiData","fetchApiData","delete","updateData","updateApiData","put","postData","postApiData","post","implementRule","TEST_AND_IMPLEMENT_RULE","e","DropDownSelect","props","Lists","dataList","dataType","DataType","fieldName","label","selectedValue","onChangeEvent","catagoryLevel","allOptions","map","ListItem","pk","className","Object","keys","item","key","fields","SensitivityLevel","value","fullWidth","htmlFor","native","inputProps","id","onChange","event","onSelect","aria-label","useStyles","makeStyles","actionButtons","actionButtonsMargin","tableWrap","headRow","bodyRows","headCells","bodyCells","noData","styled","Grid","TableData","classes","useDispatch","tableStates","useSelector","state","totalRows","perPage","currentPage","IsAllSelected","query","tableHeaders","selectOption","paginationOption","apiLink","addNewDataHandle","editDataHandle","ruleImpEnabled","isActionsEnabled","singleSelectHandle","target","parentElement","getAttribute","tableDataPrev","updatedData","index","stringify","project","deleteApiData","implementApiData","useEffect","color","m","variant","onClick","pkArray","length","implementRuleHandle","startIcon","outArray","editData","deleteDataHandle","stickyHeader","size","checked","checkedStatus","SingleHeader","row","hover","IsChecked","component","rowsPerPageOptions","rowsPerPage","page","onChangePage","currPage","currentTarget","ariaLabel","onChangeRowsPerPage","newTablePerPage","updateTaxonomyCategories","UTILS","updateDraftRulesPK","updateImplementedRulesPK","updateInvoicesPk","updateRolesList","Progess","status","updateProgressStatus","Dialog","open","aria-labelledby","aria-describedby","fullScreen","maxWidth","Box","style","width","pb","pt","ml","mr","LinearProgress","setMapSelectedDefaultTemplate","setMapSelectedDefaultTemplateData","setMapAttachFileName","setMapAttachFileHeader","setNewMappingName","fetchDefaultTemplates","DEFAULT_TEMPLETES","serData","Items","sensitivityHead","background","marginTop","itemKeys","display","justifyContent","alignContent","transform","FormPopUp","mapData","mapDataStates","actionType","formData","formState","formCloseEvent","updateDataFunction","defaultTemplates","attachFileName","selectedDefaultTemplate","selectedDefaultTemplateData","attachFileHeader","newMappingName","DataTableReference","MappedItems","MappingName","FileColumns","mappedItems","fileColumns","onClose","DialogTitle","Typography","align","gutterBottom","DialogContent","container","spacing","xs","sm","md","lg","xl","selectedIndex","defaultTemplateReference","parseInt","options","defaultTempleteSelectHandle","Button","Publish","files","name","readXlsxFile","err","uploadFileHandle","sensitivity","updatedTempleteData","templeteData","sensitivities","types","elements","mappingItemSelectHandle","justify","DialogActions","position","TextField","templateName","templateMapping","table","updateApidata","postDataApi","dataTypes","itemsCount","entries","handleSave","BorderWrapper","InvoiceQueryForm","initialState","DATE_ENTERED","MappingName__icontains","useState","setFormData","mb","InputLabelProps","shrink","Search","RotateLeft","setAttachFileName","fetchSavedTemplates","SAVED_TEMPLETES","uploadFileData","setProgressStatus","FILE_IMPORT","Upload","uploadData","uploadDataStates","savedTemplates","selectedSavedTemplate","selectedSavedTemplateData","attachFileData","setSelectedDefaultTemplateData","savedTempleteSelectHandle","savedTemplateReference","setSelectedSavedTemplateData","allData","slice","setAttachFileHeader","setAttachFileData","p","boxShadow","CloudUpload","columnsName","columnsData","sensitivityType","dbColumn","fileColumn","indexInFileColumns","indexOf","tcol","matrix","col","column","i","getCol","Invoice","selectedRow","setSelectedRow","setActionType","setFormState","UploadAndMapQueryForm","MANAGE_TEMPLATES","TEMPLATES_COLUMNS","rowData","UploadAndMapDataForm","Progress"],"mappings":"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","file":"static/js/21.8c0090f5.chunk.js","sourcesContent":["import * as type from './table.actionTypes'\r\nexport const updateTableData=(data)=>(\r\n    {\r\n        type: type.TABLE_DATA,\r\n        payload: data\r\n    }\r\n);\r\nexport const updatePerPage=(data)=>(\r\n    {\r\n        type: type.PER_PAGE,\r\n        payload: data\r\n    }\r\n);\r\nexport const updateCurrentPage=(data)=>(\r\n    {\r\n        type: type.CURRENT_PAGE,\r\n        payload: data\r\n    }\r\n);\r\nexport const updateTotalRows=(data)=>(\r\n    {\r\n        type: type.TOTAL_ROWS,\r\n        payload: data\r\n    }\r\n);\r\nexport const updateFormQuery = (data) => (\r\n    {\r\n        type : type.FORM_QUERY,\r\n        payload : data\r\n    }\r\n);\r\nexport const selectAll=(data)=>(\r\n    {\r\n        type: type.IS_ALL_SELECTED,\r\n        payload: data\r\n    }\r\n);\r\nexport const resetStates=(data)=>({\r\n    type :type.RESET_STATES,\r\n    payload:''\r\n})","import axios from 'axios'\r\nimport { useDispatch } from 'react-redux'\r\nimport {\r\n    SERVER_URL,\r\n    TEST_AND_IMPLEMENT_RULE\r\n} from '../constants'\r\nimport { \r\n    updateTableData, \r\n    updateTotalRows, \r\n    updatePerPage, \r\n    updateCurrentPage, \r\n    selectAll \r\n} from './table.actionCreators'\r\nconst queryData = (credentials, apiData ) => {\r\n        return dispatch => {\r\n            axios\r\n                .get(`${SERVER_URL}${credentials}`, { params : apiData })\r\n                .then((res)=>{\r\n                    let serviceData = JSON.parse(res.data.queryData);\r\n                    let data = []\r\n                    serviceData.forEach(element => {\r\n                        element[\"IsChecked\"] = false\r\n                        data.push(element)\r\n                    });\r\n                    dispatch(updateTableData(data))\r\n                    dispatch(updateTotalRows(res.data.count))\r\n                    //  dispatch(IsUpdating(false))\r\n                })\r\n                .catch((error)=>{\r\n                    alert(error)\r\n                    // dispatch(IsUpdating(false))\r\n                    // dispatch(FetchError(true))\r\n                })\r\n        }\r\n}\r\n\r\nconst deleteData = (credentials, delApiData, fetchApiData) =>{\r\n        return dispatch => {\r\n            axios\r\n                .delete(`${SERVER_URL}${credentials}`, { params : delApiData })\r\n                .then((res)=>{\r\n                    alert(res.data)\r\n                    dispatch( queryData( credentials, fetchApiData ))\r\n                    //  dispatch(IsUpdating(false))\r\n                })\r\n                .catch((error)=>{\r\n                    alert(error)\r\n                })\r\n        }\r\n}\r\nconst updateData = ( credentials , updateApiData , fetchApiData ) =>{\r\n    return dispatch => {\r\n        axios\r\n            .put(`${SERVER_URL}${credentials}`, { params : updateApiData })\r\n            .then((res)=>{\r\n                alert(res.data)\r\n                dispatch( queryData( credentials, fetchApiData ))\r\n                //  dispatch(IsUpdating(false))\r\n            })\r\n            .catch((error)=>{\r\n                alert(error)\r\n            })\r\n    }\r\n}\r\nconst postData = ( credentials , postApiData, fetchApiData ) =>{\r\n    return dispatch => {\r\n        axios\r\n            .post(`${SERVER_URL}${credentials}`, { params : postApiData })\r\n            .then((res)=>{\r\n                alert(res.data)\r\n                dispatch( queryData( credentials, fetchApiData ))\r\n                //  dispatch(IsUpdating(false))\r\n            })\r\n            .catch((error)=>{\r\n                alert(error)\r\n            })\r\n    }\r\n}\r\nconst implementRule = (credentials, postApiData, fetchApiData)=>{\r\n    return dispatch =>{\r\n        axios.post(`${SERVER_URL}${TEST_AND_IMPLEMENT_RULE}/`,{ params : postApiData})\r\n        .then((res)=>{\r\n            alert(res.data)\r\n            dispatch( queryData( credentials, fetchApiData ))\r\n        })\r\n        .catch((e)=>{\r\n            alert(e)\r\n        })\r\n    }\r\n}\r\nexport { deleteData, queryData, updateData, postData, implementRule }","// import * as All from '../Global/actions';\r\nimport React from 'react';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nfunction DropDownSelect(props) {\r\n        const { \r\n            dataList : Lists, \r\n            DataType : dataType, \r\n            fieldName, \r\n            label, \r\n            selectedValue, \r\n            onChangeEvent,\r\n            catagoryLevel\r\n        } = props\r\n        let allOptions = '';\r\n        if (Lists) {\r\n            if (dataType === \"KeyValue\") {\r\n                allOptions = Lists.map((ListItem) => <option pk={ListItem[\"pk\"]} className=\"selectOption\">{ListItem[\"name\"]}</option>);\r\n            }\r\n            if (dataType === \"ListData\") {\r\n                allOptions = Lists.map((ListItem) => <option pk={ListItem} className=\"selectOption\">{ListItem}</option>);\r\n            }\r\n            if (dataType === \"ListDataWithCatagory\") {\r\n                allOptions = Lists.map((ListItem) => <option catagoryLevel ={catagoryLevel} pk={ListItem} className=\"selectOption\">{ListItem}</option>);\r\n            }\r\n            if (dataType === \"ListDataWithFieldName\") {\r\n                allOptions = Lists.map((ListItem) => <option fieldName ={fieldName} pk={ListItem} className=\"selectOption\">{ListItem}</option>);\r\n            }\r\n            if(dataType===\"GroupDataWithType\"){\r\n                allOptions = Object.keys(Lists).map((ListItem) => \r\n                Lists[ListItem].map((item)=><option dataType={ListItem}  className=\"selectOption\">{item}</option>)\r\n                );\r\n            }\r\n            if (dataType === \"WithPkAndFieldName\") {\r\n                allOptions = Lists.map((ListItem) => \r\n                <option key={ListItem.pk} pk={ListItem.pk} \r\n                    className=\"selectOption\">{(ListItem ?.fields?.[fieldName])?\r\n                                                ListItem.fields[fieldName]:<></>}\r\n                </option>);\r\n            }\r\n            if(dataType === \"GroupData\"){\r\n                let SensitivitiesLevels = Object.keys(Lists)\r\n                allOptions = SensitivitiesLevels.map((SensitivityLevel) =>\r\n                    <optgroup label={SensitivityLevel} className={SensitivityLevel+\"Options\"}>\r\n                            {\r\n                                Object.keys(Lists[SensitivityLevel]).map((data)=>\r\n                                    <>\r\n                                        { Lists[SensitivityLevel][data].map((value)=>\r\n                                            <option \r\n                                                data=\r\n                                                    {[\r\n                                                        SensitivityLevel,data,value\r\n                                                    ]}>\r\n                                                {value}\r\n                                            </option>\r\n                                        )}\r\n                                    </>\r\n                                )\r\n                            }\r\n                    </optgroup>)\r\n            }\r\n        }\r\n        return (\r\n            <>\r\n                <FormControl fullWidth>\r\n                    <InputLabel htmlFor=\"outlined-native-simple\" > \r\n                        {label} \r\n                    </InputLabel>\r\n                    <Select \r\n                        native \r\n                        inputProps={{\r\n                            id: 'filled-native-simple',\r\n                          }}\r\n                        label=\"Default Templetes\" \r\n                        value={selectedValue} \r\n                        onChange={(event) => onChangeEvent(event)} \r\n                        onSelect={(event) => onChangeEvent(event)} \r\n                        className=\"selectInput\">\r\n                        <option aria-label=\"None\" value=\"\"></option>\r\n                        {allOptions}\r\n                    </Select>\r\n                </FormControl>\r\n        </>\r\n    )\r\n}\r\nexport default DropDownSelect;\r\n","import React, { useEffect } from 'react';\r\nimport {\r\n    Table, \r\n    TableBody, \r\n    TableCell, \r\n    TableHead,\r\n    TableRow, \r\n    Paper, \r\n    TablePagination, \r\n    Checkbox,\r\n    CardMedia, \r\n    Card, \r\n    Typography\r\n} from '@material-ui/core'\r\nimport { \r\n    connect, \r\n    useDispatch, \r\n    useSelector \r\n} from 'react-redux'\r\nimport { \r\n    updateTableData, \r\n    updatePerPage, \r\n    updateCurrentPage, \r\n    updateTotalRows, \r\n    selectAll \r\n} from './table.actionCreators'\r\nimport styled from 'styled-components';\r\nimport { Button, Box, Grid } from '@material-ui/core'\r\nimport { DeleteOutline, Add, Edit} from '@material-ui/icons'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { queryData, deleteData, implementRule } from \"./table.actions\"\r\nimport { resetStates } from './table.actionCreators'\r\nconst useStyles = makeStyles({\r\n    actionButtons : {\r\n        \"paddingTop\" : \"5px\",\r\n        \"paddingLeft\" : \"22px\"\r\n    },\r\n    actionButtonsMargin : {\r\n        \"marginRight\" : \"10px\"\r\n    },\r\n    tableWrap : {\r\n        \"maxWidth\": \"1025px\", \r\n        \"overflow\": \"auto\" \r\n    },\r\n    headRow : {\r\n        \"borderRadius\" : \"15px 50px 30px 5px\", \r\n        \"height\" : \"10px\",\r\n        \"backgroundColor\": \"white\"\r\n    },\r\n    bodyRows : {\r\n        \"height\": \"10px\", \r\n        \"padding\": \"0px\"\r\n    },\r\n    headCells : {\r\n        \"backgroundColor\": \"white\", \r\n        \"color\": \"black\", \r\n        \"fontSize\": \"12px\",\r\n        \"textAlign\": \"left\"\r\n    },\r\n    bodyCells : {\r\n        \"fontSize\": \"11px\",\r\n        \"textAlign\": \"left\"\r\n    },\r\n    noData : {\r\n        \"textAlign\" : \"center\",\r\n        \"margin\" : \"20px\"\r\n    }\r\n})\r\nconst ActionsGrid = styled(Grid)`\r\n    paddingTop : \"5px\",\r\n    paddingLeft : \"22px\"\r\n`\r\n// const styles = theme => ({\r\n//     root: {\r\n//         width: '100%',\r\n//         marginTop: theme.spacing.unit * 3,\r\n//         overflowX: 'auto',\r\n//     },\r\n//     table: {\r\n//         minWidth: 700,\r\n//     },\r\n// });\r\nconst selRowsArr = (rowsData)=> {\r\n    let outArray = []\r\n        for (let index in rowsData) {\r\n            if (rowsData[index]['IsChecked'] == true) {\r\n                outArray.push(rowsData[index])\r\n            }\r\n        }\r\n    return outArray\r\n}\r\nfunction TableData(props) {\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const tableStates = useSelector(state => state.tableStates)\r\n    const { data, totalRows, perPage, currentPage, IsAllSelected, query } = tableStates\r\n    const { \r\n        tableHeaders, \r\n        selectOption, \r\n        paginationOption, \r\n        apiLink , \r\n        addNewDataHandle, \r\n        editDataHandle, \r\n        isActionsEnabled,\r\n        ruleImpEnabled\r\n    } = props\r\n    \r\n    const selectAllHandle = (e) => {\r\n        const checkedStatus = e.target.checked\r\n        dispatch(selectAll(checkedStatus))\r\n        let tableDataPrev = data;\r\n        let updatedData = [];\r\n        for (let index in tableDataPrev) {\r\n            let item = { ...tableDataPrev[index] };\r\n            item['IsChecked'] = checkedStatus\r\n            updatedData.push(item)\r\n        }\r\n        dispatch(updateTableData(updatedData))\r\n    }\r\n    const singleSelectHandle = (e) => {\r\n        debugger;\r\n        let pk = e.target.parentElement.parentElement.getAttribute(\"pk\")\r\n        if (pk == null) {\r\n            pk = e.target.parentElement.getAttribute(\"pk\")\r\n        }\r\n        let tableDataPrev = data;\r\n        let updatedData = [];\r\n        for (let index in tableDataPrev) {\r\n            let item = { ...tableDataPrev[index] };\r\n            if(item['pk'] == pk){\r\n                item['IsChecked'] = !item['IsChecked']\r\n            }\r\n            updatedData.push(item)\r\n        }\r\n        dispatch(updateTableData(updatedData))\r\n    }\r\n    let fetchApiData = {\r\n        query : JSON.stringify(query),\r\n        currentPage : currentPage,\r\n        perPage : perPage,\r\n        project : \"1\",\r\n    }\r\n    let deleteApiData = {\r\n        project : \"1\",\r\n    }\r\n    let implementApiData = {\r\n        project : \"1\"\r\n    }\r\n    const deleteDataHandle = () => {\r\n        let pkArray = [];\r\n        for (let index in data) {\r\n            if (data[index]['IsChecked'] == true) {\r\n                pkArray.push(data[index]['pk'])\r\n            }\r\n        }\r\n        deleteApiData[\"pkArray\"] = JSON.stringify(pkArray)\r\n        pkArray.length >0?\r\n            dispatch( deleteData( apiLink, deleteApiData, fetchApiData ))\r\n            :alert(\"Select Data\")\r\n    }\r\n    const editData = () => {\r\n        let outArray = []\r\n        for (let index in data) {\r\n            if (data[index]['IsChecked'] == true) {\r\n                outArray.push(data[index])\r\n            }\r\n        }\r\n        outArray.length>1 || outArray.length==0\r\n        ? alert(\"Select A single Row\")\r\n        : editDataHandle(outArray[0])\r\n    }\r\n    const implementRuleHandle = () =>{\r\n        let pkArray = [];\r\n        for (let index in data) {\r\n            if (data[index]['IsChecked'] == true) {\r\n                pkArray.push(data[index]['pk'])\r\n            }\r\n        }\r\n        implementApiData[\"pkArray\"] = JSON.stringify(pkArray)\r\n        fetchApiData[\"STATUS\"] = 'draft'\r\n        pkArray.length >0?\r\n            dispatch( implementRule( apiLink, implementApiData, fetchApiData ))\r\n            :alert(\"Select Data\")\r\n    }\r\n    const changePageHandle = (e) => {\r\n        let currPage = currentPage\r\n        e.currentTarget.ariaLabel == \"Next page\" ? currPage += 1 : currPage -= 1\r\n        dispatch(updateCurrentPage(currPage))\r\n        fetchApiData['currentPage'] = currPage\r\n        dispatch(queryData( apiLink, fetchApiData ))\r\n    }\r\n    const changeRowsPerPageHandle = (e) => {\r\n        let newTablePerPage = e.target.value;\r\n        dispatch(updatePerPage(newTablePerPage))\r\n        dispatch(updateCurrentPage(0))\r\n        fetchApiData['perPage'] = newTablePerPage\r\n        fetchApiData['currentPage'] = 0\r\n        dispatch(queryData( apiLink, fetchApiData ))\r\n    }\r\n    useEffect( () => { \r\n        dispatch( queryData( apiLink, fetchApiData ))\r\n        return ()=>{\r\n            dispatch(resetStates())\r\n        }\r\n    },[])\r\n    const variant = 'contained'\r\n    const color = 'primary'\r\n    return (\r\n        <Paper>\r\n            {  selectOption &&\r\n                <div className = {classes.actionButtons}>\r\n                    <Box m={1} >\r\n                        {   \r\n                            ruleImpEnabled &&\r\n                            <Button\r\n                                color={color}\r\n                                variant={variant}\r\n                                // startIcon={<DeleteOutline />}\r\n                                onClick={() => implementRuleHandle()}\r\n                                className={classes.actionButtonsMargin}\r\n                            >\r\n                            Implement\r\n                            </Button>\r\n                        }\r\n                        <Button\r\n                            color={color}\r\n                            variant={variant}\r\n                            startIcon={<Add />}\r\n                            onClick={() => addNewDataHandle()}\r\n                            className={classes.actionButtonsMargin}\r\n                        >\r\n                        Add\r\n                        </Button>\r\n                        <Button\r\n                            color={color}\r\n                            variant={variant}\r\n                            startIcon={<Edit/>}\r\n                            onClick={() => editData()}\r\n                            className={classes.actionButtonsMargin}\r\n                        >\r\n                        Edit\r\n                        </Button>\r\n                        <Button\r\n                            color={color}\r\n                            variant={variant}\r\n                            startIcon={<DeleteOutline />}\r\n                            onClick={() => deleteDataHandle()}\r\n                            className={classes.actionButtonsMargin}\r\n                        >\r\n                        Delete\r\n                        </Button>\r\n                    </Box>\r\n                </div>\r\n            }\r\n            \r\n            <div className = {classes.tableWrap}>\r\n                <Table \r\n                    stickyHeader \r\n                    aria-label=\"sticky table\" \r\n                    size=\"small\" \r\n                    className = {classes.tableWrap}>\r\n                    <TableHead>\r\n                        <TableRow className={classes.headRow}>\r\n                            {   selectOption && \r\n                                    <TableCell className={classes.headCells} >\r\n                                        <Checkbox \r\n                                            color={color} \r\n                                            checked={IsAllSelected}\r\n                                            onClick={selectAllHandle} \r\n                                        />\r\n                                    </TableCell>\r\n                            }\r\n                            <TableCell className={classes.headCells} >ID</TableCell>\r\n                            {Object.keys(tableHeaders).map(SingleHeader =>\r\n                                <TableCell \r\n                                    className={classes.headCells} \r\n                                >\r\n                                    {SingleHeader}\r\n                                </TableCell>\r\n                            )}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        \r\n                        {data.length > 0 && data.map(row => (\r\n                            <TableRow \r\n                                className={classes.bodyRows} \r\n                                hover={true}\r\n                                onClick={ selectOption && singleSelectHandle}\r\n                                pk={row.pk}\r\n                                checked={row.IsChecked}\r\n                            >\r\n                                {\r\n                                    selectOption &&\r\n                                        <TableCell>\r\n                                            <Checkbox \r\n                                                color={color} \r\n                                                pk={row.pk} \r\n                                                checked={row.IsChecked}\r\n                                            />\r\n                                        </TableCell>\r\n                                }\r\n                                {row?.pk && <TableCell>{row.pk}</TableCell>}\r\n                                {\r\n                                    Object.keys(tableHeaders).map(key =>\r\n                                        <TableCell \r\n                                            className ={ classes.bodyCells }\r\n                                        >\r\n                                        {row.fields[tableHeaders[key]]}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                            </TableRow>\r\n                        )) }\r\n                    </TableBody>\r\n                </Table>\r\n                {\r\n                    data.length == 0 && \r\n                        <Card className={classes.noData}>\r\n                            <Typography  component=\"h2\">\r\n                                No Data\r\n                            </Typography>\r\n                        </Card>\r\n                }\r\n            </div>\r\n            {\r\n                paginationOption &&\r\n                <TablePagination\r\n                    rowsPerPageOptions={[3, 5, 10, 25,50, 100,500]}\r\n                    component=\"div\"\r\n                    count={totalRows}\r\n                    rowsPerPage={perPage}\r\n                    page={currentPage}\r\n                    onChangePage={changePageHandle}\r\n                    onChangeRowsPerPage={changeRowsPerPageHandle}\r\n                />\r\n            }\r\n        </Paper>\r\n    );\r\n}\r\n\r\nexport default TableData;\r\n","import axios from 'axios'\r\nimport { useDispatch } from 'react-redux'\r\nimport { getTaxonomyCategories, getDraftedRulesPk, getImplementedRulesPk, getAllInvoicesPk, getRolesList } from './utils.actionsCreators'\r\nimport {\r\n    SERVER_URL,\r\n    UTILS\r\n} from '../constants'\r\nconst projectKey = '1'\r\nconst updateTaxonomyCategories = () => {\r\n    return dispatch => {\r\n        axios\r\n            .get(\r\n                `${SERVER_URL}${UTILS}`,\r\n                {\r\n                    params:{\r\n                        type: \"TaxonomyCategories\",\r\n                        project: projectKey\r\n                    }\r\n                }\r\n            )\r\n            .then((res) => {\r\n                dispatch(getTaxonomyCategories(res.data))\r\n            })\r\n            .catch((error) => {\r\n                alert(error)\r\n            })\r\n    }\r\n}\r\n\r\nconst updateDraftRulesPK = () => {\r\n    return dispatch => {\r\n        axios\r\n            .get(\r\n                `${SERVER_URL}${UTILS}`,\r\n                {\r\n                    params:{\r\n                        type: \"DraftRulesPK\",\r\n                        project: projectKey\r\n                    }\r\n                }\r\n            )\r\n            .then((res) => {\r\n                dispatch(getDraftedRulesPk(res.data))\r\n            })\r\n            .catch((error) => {\r\n                alert(error)\r\n            })\r\n    }\r\n}   \r\nconst updateImplementedRulesPK = () => {\r\n    return dispatch => {\r\n        axios\r\n            .get(\r\n                `${SERVER_URL}${UTILS}`,\r\n                {\r\n                    params:{\r\n                        type: \"ImplementedRulesPK\",\r\n                        project: projectKey\r\n                    }\r\n                }\r\n            )\r\n            .then((res) => {\r\n                dispatch(getImplementedRulesPk(res.data))\r\n            })\r\n            .catch((error) => {\r\n                alert(error)\r\n            })\r\n    }\r\n}   \r\nconst updateInvoicesPk = () => {\r\n    return dispatch => {\r\n        axios\r\n            .get(\r\n                `${SERVER_URL}${UTILS}`,\r\n                {\r\n                    params:{\r\n                        type: \"InvoicesPK\",\r\n                        project: projectKey\r\n                    }\r\n                }\r\n            )\r\n            .then((res) => {\r\n                dispatch(getAllInvoicesPk(res.data))\r\n            })\r\n            .catch((error) => {\r\n                alert(error)\r\n            })\r\n    }\r\n}   \r\nconst updateRolesList = () => {\r\n    return dispatch => {\r\n        axios\r\n            .get(\r\n                `${SERVER_URL}${UTILS}`,\r\n                {\r\n                    params:{\r\n                        type: \"RolesList\",\r\n                        project: projectKey\r\n                    }\r\n                }\r\n            )\r\n            .then((res) => {\r\n                dispatch(getRolesList(res.data))\r\n            })\r\n            .catch((error) => {\r\n                alert(error)\r\n            })\r\n    }\r\n} \r\nexport { updateTaxonomyCategories, updateDraftRulesPK, updateImplementedRulesPK, updateInvoicesPk, updateRolesList }\r\n","import * as type from './utils.actionTypes'\r\n\r\nexport const getTaxonomyCategories=(data)=>(\r\n    {\r\n        type: type.GET_TAXONOMY_CATEGORIES,\r\n        payload: data\r\n    }\r\n);\r\nexport const getDraftedRulesPk=(data)=>(\r\n    {\r\n        type: type.DRAFTED_RULES_PK,\r\n        payload: data\r\n    }\r\n);\r\nexport const getImplementedRulesPk=(data)=>(\r\n    {\r\n        type: type.IMPLEMENTED_RULES_PK,\r\n        payload: data\r\n    }\r\n);\r\nexport const getAllInvoicesPk=(data)=>(\r\n    {\r\n        type: type.ALL_INVOICES_PK,\r\n        payload: data\r\n    }\r\n);\r\nexport const getRolesList=(data)=>(\r\n    {\r\n        type: type.ALL_ROLES_LIST,\r\n        payload: data\r\n    }\r\n);","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { \r\n    Button, \r\n    Dialog, \r\n    DialogActions, \r\n    DialogContent, \r\n    DialogTitle, \r\n    LinearProgress,\r\n    Box\r\n} from '@material-ui/core';\r\n\r\nconst  Progess = ()=> {\r\n  const progressStatus = useSelector(state => state.updateProgressStatus)\r\n  const { status } = progressStatus\r\n  debugger;\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={status}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n        fullScreen = {false}\r\n        maxWidth = 'lg'\r\n      >\r\n        <Box style={{width:\"200px\"}} pb={2} pt ={2} ml={2} mr={2}>\r\n            <LinearProgress/>\r\n        </Box>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\nexport default Progess ","import * as type from './actionTypes'\r\nexport const defaltTemplates=(data)=>(\r\n    {\r\n        type: type.DEFAULT_TEMPLATES,\r\n        payload: data\r\n    }\r\n);\r\nexport const setMapSelectedDefaultTemplate=(data)=>(\r\n    {\r\n        type: type.SELECTED_DEFAULT_TEMPLATE,\r\n        payload: data\r\n    }\r\n);\r\nexport const setMapSelectedDefaultTemplateData = (data)=>({\r\n    type: type.SELECTED_DEFAULT_TEMPLATE_DATA,\r\n    payload: data\r\n})\r\nexport const setMapAttachFileName=(data)=>(\r\n    {\r\n        type: type.ATTACH_FILE_NAME,\r\n        payload: data\r\n    }\r\n);\r\nexport const setMapAttachFileHeader=(data)=>(\r\n    {\r\n        type: type.ATTACH_FILE_HEADER,\r\n        payload: data\r\n    }\r\n);\r\nexport const setNewMappingName=(data)=>(\r\n    {\r\n        type: type.NEW_MAPPING_NAME,\r\n        payload: data\r\n    }\r\n);\r\n","import axios from 'axios'\r\nimport { useDispatch } from 'react-redux'\r\nimport { defaltTemplates, \r\n    selectedDefaultTemplate, \r\n    savedTemplates, \r\n    selectedSavedTemplate, \r\n    attachFileName, \r\n    attachFileData } from './actionCreators'\r\nimport { SERVER_URL, DEFAULT_TEMPLETES, SAVED_TEMPLETES, MANAGE_TEMPLATES} from \"../../../../../global/constants\" \r\nconst fetchDefaultTemplates = () => {\r\n        return dispatch => {\r\n            axios\r\n                .get(`${SERVER_URL}${DEFAULT_TEMPLETES}`)\r\n                .then((res)=>{\r\n                    let serData =[]\r\n                    res.data.forEach((element)=>{\r\n                        let fields = {...element.fields ,Items: JSON.parse(element.fields.Items)}\r\n                        element.fields = fields\r\n                        serData.push(element)\r\n                    })\r\n                    dispatch (defaltTemplates(serData))\r\n                })\r\n                .catch((error) => {\r\n                    alert(error)\r\n                })\r\n        }\r\n}\r\nconst postMapping = ( postApiData ) => {\r\n    return dispatch => {\r\n        axios\r\n            .post(`${SERVER_URL}${MANAGE_TEMPLATES}`, postApiData )\r\n            .then((res)=>{ \r\n                alert(res.data)\r\n            })\r\n            .catch((error)=>{\r\n                alert(error)\r\n            })\r\n    }\r\n}\r\nexport { fetchDefaultTemplates , postMapping}","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport readXlsxFile from 'read-excel-file';\r\nimport {\r\n    Grid,\r\n    Box,\r\n    Typography,\r\n    Button,\r\n    TextField,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle\r\n} from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/styles'\r\nimport { Publish } from '@material-ui/icons'\r\n\r\nimport DropDownSelect from '../../../../global/dropDownSelect'\r\nimport { fetchDefaultTemplates } from './map/actions'\r\nimport { updateData, postData } from '../../../../global/table/table.actions'\r\nimport { \r\n    setMapAttachFileName, \r\n    setMapAttachFileHeader, \r\n    setMapSelectedDefaultTemplate, \r\n    setMapSelectedDefaultTemplateData,\r\n    setNewMappingName\r\n} from './map/actionCreators'\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    sensitivityHead :{\r\n        background : 'grey',\r\n        color : \"white\",\r\n        marginTop : \"30px\" \r\n    },\r\n    itemKeys: {\r\n        display : \"flex\",\r\n        justifyContent  : \"center\",\r\n        alignContent : \"center\",\r\n        transform: \"translateY(27px)\"\r\n    }\r\n})\r\nfunction FormPopUp(props){\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const mapData = useSelector(state => state.mapDataStates)\r\n    const tableStates = useSelector(state => state.tableStates)\r\n    const { perPage, currentPage } = tableStates\r\n    const { actionType, formData, formState, formCloseEvent, updateDataFunction, apiLink } = props\r\n    const { \r\n        defaultTemplates,\r\n        attachFileName,\r\n        selectedDefaultTemplate,\r\n        selectedDefaultTemplateData,\r\n        attachFileHeader,\r\n        newMappingName\r\n    } = mapData\r\n\r\n    const uploadFileHandle = (e) =>{\r\n        try {\r\n            dispatch(setMapAttachFileName(e.target.files[0].name))\r\n            readXlsxFile(e.target.files[0]).then((data) => {\r\n                dispatch(setMapAttachFileHeader(data[0]))\r\n            })\r\n        }\r\n        catch (err) {\r\n            dispatch(setMapAttachFileName(attachFileName))\r\n        }\r\n    }\r\n    const handleSave = () => {\r\n        const apiData = {\r\n            templateName: newMappingName, \r\n            templateMapping: JSON.stringify(selectedDefaultTemplateData),\r\n            fileColumns: JSON.stringify(attachFileHeader), \r\n            table: selectedDefaultTemplate, \r\n            project : '1'\r\n        }\r\n        let updateApidata = {\r\n            pk : formData.pk,\r\n            payload : JSON.stringify(apiData),\r\n        }\r\n        let postDataApi = {\r\n            payload : JSON.stringify(apiData),\r\n            project : \"1\",\r\n        }\r\n        const fetchApiData = {\r\n            query : {},\r\n            currentPage : currentPage,\r\n            perPage : perPage,\r\n            project : \"1\"\r\n        }\r\n        if (selectedDefaultTemplate == \"\") {\r\n            alert(\"Select A default templete\")\r\n        }\r\n        else {\r\n            let dataTypes = selectedDefaultTemplateData[\"Mandatory\"]\r\n            let type = Object.keys(dataTypes)\r\n            let itemsCount = 0;\r\n            type.forEach((item)=>{\r\n                for (const [key, value] of Object.entries(dataTypes[item])) {\r\n                    if(value === \"\"){\r\n                        itemsCount++\r\n                    }\r\n                  }\r\n            })\r\n            if (itemsCount > 0 || newMappingName == '') {\r\n                if (itemsCount > 0) {\r\n                    alert(\"Select All Mandatory Items\")\r\n                }\r\n                if (newMappingName == '') {\r\n                    alert(\"Choose A Templete Name\")\r\n                }\r\n            }\r\n            else {\r\n                if (actionType == \"Edit\") {\r\n                    dispatch( updateData(\r\n                        apiLink, updateApidata, fetchApiData\r\n                    ));\r\n                }\r\n                else {\r\n                    dispatch( postData(\r\n                        apiLink, postDataApi, fetchApiData\r\n                    ));\r\n                }\r\n                formCloseEvent()\r\n            }\r\n        }\r\n        \r\n    }\r\n    const defaultTempleteSelectHandle=(e)=>{\r\n        let selectedIndex = e.target.selectedIndex;\r\n        let defaultTemplateReference = parseInt(e.target.options[selectedIndex].getAttribute(\"pk\"));\r\n        dispatch(setMapSelectedDefaultTemplate(defaultTemplateReference))\r\n        defaultTemplates.forEach((element)=>{\r\n            if(element.pk===defaultTemplateReference){\r\n                dispatch(setMapSelectedDefaultTemplateData(element.fields.Items))\r\n            }\r\n        })\r\n    }\r\n    const mappingItemSelectHandle = (e, sensitivity, type, element) =>{\r\n        const value = e.target.value\r\n        const templeteData = selectedDefaultTemplateData;\r\n        let updatedTempleteData = {}\r\n        let sensitivities  = {...selectedDefaultTemplateData[sensitivity]}\r\n        let types = { ...sensitivities[type] }\r\n        let elements = { ...types, [element]: value  }\r\n        sensitivities[type] = elements\r\n        updatedTempleteData = {\r\n            ...templeteData, [sensitivity]:sensitivities\r\n        }\r\n        dispatch(setMapSelectedDefaultTemplateData(updatedTempleteData))\r\n    }\r\n    const textFieldId = 'outlined-basic'\r\n    const textFieldVarient = 'outlined'\r\n    useEffect(()=>{\r\n        dispatch(fetchDefaultTemplates())\r\n        if(actionType==\"Edit\"){\r\n            const { DataTableReference, MappedItems, MappingName, FileColumns  }  = formData.fields\r\n            const mappedItems = JSON.parse(MappedItems)\r\n            const fileColumns = JSON.parse(FileColumns)\r\n            dispatch(setMapAttachFileHeader(fileColumns))\r\n            dispatch(setMapSelectedDefaultTemplate(DataTableReference))\r\n            dispatch(setMapSelectedDefaultTemplateData(mappedItems)) \r\n            dispatch(setNewMappingName(MappingName))\r\n        }\r\n    },[])\r\n    return(\r\n        <>\r\n            <Dialog open={formState} onClose={formCloseEvent} aria-labelledby=\"form-dialog-title\"  fullWidth={true}\r\n                    maxWidth='sm'>\r\n                <DialogTitle id=\"form-dialog-title\">\r\n                    <Typography variant=\"h6\" component=\"h2\" align=\"left\" gutterBottom>\r\n                        <Box>\r\n                            {actionType}  Mapping\r\n                        </Box>\r\n                    </Typography>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <Grid container spacing = {0}>\r\n                        <Grid xs={5} sm={5} md={5} lg={5} xl={5}>\r\n                            <Box m={1}>\r\n                                <DropDownSelect\r\n                                    dataList={ defaultTemplates }\r\n                                    DataType=\"WithPkAndFieldName\"\r\n                                    fieldName = \"TableName\"\r\n                                    label=\"Table\"\r\n                                    onChangeEvent={(e) => defaultTempleteSelectHandle(e)}\r\n                                />\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid xs={7} sm={7} md={7} lg={7} xl={7}>\r\n                            <Box m={1}>\r\n                                <Button\r\n                                    size=\"large\"\r\n                                    variant=\"outlined\"\r\n                                    component=\"label\"\r\n                                    color=\"primary\"\r\n                                    style={{ width: \"100%\" }}\r\n                                    startIcon={<Publish />}\r\n                                    onChange={(e) => uploadFileHandle(e)}\r\n                                >\r\n                                { attachFileName }\r\n                                <input\r\n                                    type=\"file\"\r\n                                    style={{ display: \"none\" }}\r\n                                />\r\n                                </Button>\r\n                            </Box>\r\n                        </Grid>\r\n                </Grid>\r\n                <Grid container spacing = {0}>\r\n                    <Grid xs={12} sm={12} md={12} lg={12} xl={12}>\r\n                        { \r\n                            Object.keys(selectedDefaultTemplateData).map( sensitivity => (\r\n                                <>\r\n                                    <Typography \r\n                                        variant=\"h6\" \r\n                                        component=\"h2\" \r\n                                        align=\"center\" \r\n                                        gutterBottom\r\n                                        className = { classes.sensitivityHead }\r\n                                    >\r\n                                        <Box >\r\n                                            { sensitivity }\r\n                                        </Box>\r\n                                    </Typography>\r\n                                    {\r\n                                        Object.keys(selectedDefaultTemplateData[sensitivity]).map( type => (\r\n                                            <>\r\n                                                <Box >\r\n                                                    { type }\r\n                                                </Box>\r\n                                                { \r\n                                                    Object.keys(selectedDefaultTemplateData[sensitivity][type]).map(element=>(\r\n                                                        <Grid container spacing={0}>\r\n                                                            <Grid xs={6} sm={6} md={6} lg={6} xl={6}>\r\n                                                                <Box\r\n                                                                    className = { classes.itemKeys}\r\n                                                                >\r\n                                                                    { element }\r\n                                                                </Box>\r\n                                                            </Grid>\r\n                                                            <Grid xs={6} sm={6} md={6} lg={6} xl={6}>\r\n                                                                <DropDownSelect\r\n                                                                    dataList={ attachFileHeader }\r\n                                                                    DataType=\"ListData\"\r\n                                                                    fieldName = \"TableName\"\r\n                                                                    selectedValue = { selectedDefaultTemplateData[sensitivity][type][element]}\r\n                                                                    label=\"Select\"\r\n                                                                    onChangeEvent={(e)=> mappingItemSelectHandle(e, sensitivity, type, element)}\r\n                                                                />\r\n                                                            </Grid>\r\n                                                        </Grid>\r\n                                                    ))\r\n                                                }\r\n                                            </>\r\n                                        ))\r\n                                    }\r\n                                </>\r\n                            ))\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n                </DialogContent>\r\n                <Grid container justify=\"center\">\r\n                    <DialogActions position=\"centre\">\r\n                        <TextField\r\n                            label=\"New Templete Name\"\r\n                            id=\"outlined-size-small\"\r\n                            size=\"small\"\r\n                            onChange={(e) => dispatch(setNewMappingName(e.target.value))}\r\n                            value = { newMappingName }\r\n                        />\r\n                        <Button onClick={() => handleSave()} variant=\"contained\" color=\"primary\">\r\n                            {actionType==\"Edit\"?\"Update\":\"Save\"}\r\n                        </Button>\r\n                        <Button onClick = { formCloseEvent } variant={ textFieldVarient } color=\"primary\">\r\n                            Cancel\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Grid>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FormPopUp;\r\n","import React, { useState, useEffect} from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Grid, Button, Box, TextField } from '@material-ui/core'\r\nimport { Search, RotateLeft } from '@material-ui/icons'\r\nimport DropDownSelect from '../../../../global/dropDownSelect'\r\nimport { updateFormQuery } from '../../../../global/table/table.actionCreators'\r\nimport { queryData } from '../../../../global/table/table.actions'\r\nimport { updateTaxonomyCategories } from '../../../../global/utils/utils.actions.js'\r\nimport styled from 'styled-components'\r\nconst BorderWrapper = styled(Box)`\r\n    background: white\r\n`\r\nfunction InvoiceQueryForm(props){\r\n    const dispatch = useDispatch()\r\n    const tableStates = useSelector(state => state.tableStates)\r\n    const { perPage, currentPage, query } = tableStates\r\n    const { apiLink } = props  \r\n    const initialState = {\r\n        DATE_ENTERED: '',\r\n        MappingName__icontains: '',\r\n        DataTableReference: ''\r\n    }\r\n    const [ formData, setFormData ] = useState (initialState);\r\n    const credentials = apiLink\r\n    let fetchApiData = {\r\n        currentPage : currentPage,\r\n        perPage : perPage,\r\n        project : \"1\"\r\n    }\r\n    const searchQueryHandle = () => {\r\n        fetchApiData[\"query\"] = JSON.stringify(formData)\r\n        dispatch( updateFormQuery (formData))\r\n        dispatch( queryData ( credentials, fetchApiData ))\r\n    }\r\n    const resetQueryHandle = () => {\r\n        fetchApiData[\"query\"] = JSON.stringify(initialState)\r\n        setFormData(initialState)\r\n        dispatch( updateFormQuery (initialState))\r\n        dispatch( queryData ( credentials, fetchApiData ))\r\n    }\r\n    return(\r\n        <BorderWrapper pt={3} mb ={3}>\r\n            <Grid container spacing={0}>\r\n                <Grid xs={6} sm={6} md={10} lg={10} xl={10} >\r\n                    <Grid container spacing={0}>\r\n                        <Grid xs={3} sm={3} md={3} lg={3} xl={3} >\r\n                            <Box m={1}>\r\n                                <TextField\r\n                                    id=\"outlined-basic\" \r\n                                    variant=\"outlined\"\r\n                                    style ={{width:\"100%\"}}\r\n                                    label=\"Data Table\"\r\n                                    value={formData.DataTableReference}\r\n                                    onChange={(e) => setFormData({...formData, 'DataTableReference' : e.target.value})}\r\n                                />\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid xs={3} sm={3} md={3} lg={3} xl={3} >\r\n                            <Box m={1}>\r\n                                <TextField\r\n                                    id=\"outlined-basic\" \r\n                                    variant=\"outlined\"\r\n                                    style ={{width:\"100%\"}}\r\n                                    label=\"Mapping Name\"\r\n                                    value={formData.MappingName__icontains}\r\n                                    onChange={(e) => setFormData({...formData, 'MappingName__icontains' : e.target.value})}\r\n                                />\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid xs={3} sm={3} md={3} lg={3} xl={3} >\r\n                            <Box m={1}>\r\n                                <TextField\r\n                                    id=\"outlined-basic\" \r\n                                    variant=\"outlined\"\r\n                                    style = {{width:\"100%\"}}\r\n                                    type=\"date\"\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    label=\"DATE_ENTERED\"\r\n                                    value={formData.DATE_ENTERED}\r\n                                    onChange={(e) => setFormData({...formData, 'DATE_ENTERED' : e.target.value})}\r\n                                />\r\n                            </Box>\r\n                        </Grid>\r\n                        \r\n                    </Grid>\r\n                </Grid>\r\n                <Grid xs={6} sm={6} md={10} lg={2} xl={2} >\r\n                    <Box m={1}>\r\n                        <Button\r\n                            color=\"primary\"\r\n                            variant=\"contained\"\r\n                            startIcon={ <Search/> }\r\n                            onClick={() => searchQueryHandle()}\r\n                        >\r\n                            Search\r\n                        </Button>\r\n                    </Box>\r\n                    <Box m={1}>\r\n                        <Button\r\n                            color=\"primary\"\r\n                            variant=\"contained\"\r\n                            startIcon={ <RotateLeft/>}\r\n                            onClick={ () => resetQueryHandle() }\r\n                        >\r\n                            Reset\r\n                        </Button>\r\n                    </Box>\r\n                </Grid>\r\n            \r\n            </Grid>\r\n        </BorderWrapper>\r\n    );\r\n}\r\nexport default InvoiceQueryForm\r\n","import * as type from './actionTypes'\r\nexport const defaltTemplates=(data)=>(\r\n    {\r\n        type: type.DEFAULT_TEMPLATES,\r\n        payload: data\r\n    }\r\n);\r\nexport const setSelectedDefaultTemplate=(data)=>(\r\n    {\r\n        type: type.SELECTED_DEFAULT_TEMPLATE,\r\n        payload: data\r\n    }\r\n);\r\nexport const setSelectedDefaultTemplateData = (data)=>({\r\n    type: type.SELECTED_DEFAULT_TEMPLATE_DATA,\r\n    payload: data\r\n})\r\nexport const savedTemplates=(data)=>(\r\n    {\r\n        type: type.SAVED_TEMPLATES,\r\n        payload: data\r\n    }\r\n);\r\nexport const setSelectedSavedTemplate=(data)=>(\r\n    {\r\n        type: type.SELECTED_SAVED_TEMPLATE,\r\n        payload: data\r\n    }\r\n);\r\nexport const setSelectedSavedTemplateData = (data)=>({\r\n    type: type.SELECTED_SAVED_TEMPLATE_DATA,\r\n    payload: data\r\n})\r\nexport const setAttachFileName=(data)=>(\r\n    {\r\n        type: type.ATTACH_FILE_NAME,\r\n        payload: data\r\n    }\r\n);\r\nexport const setAttachFileHeader=(data)=>(\r\n    {\r\n        type: type.ATTACH_FILE_HEADER,\r\n        payload: data\r\n    }\r\n);\r\nexport const setAttachFileData=(data)=>(\r\n    {\r\n        type: type.ATTACH_FILE_DATA,\r\n        payload: data\r\n    }\r\n);\r\nexport const resetUploadStates=(data)=>(\r\n    {\r\n        type: type.RESET_UPLOAD_STATES,\r\n        payload: data\r\n    }\r\n);","import axios from 'axios'\r\nimport { useDispatch } from 'react-redux'\r\nimport { defaltTemplates, \r\n    selectedDefaultTemplate, \r\n    savedTemplates, \r\n    selectedSavedTemplate, \r\n    attachFileName, \r\n    attachFileData,\r\n    resetUploadStates\r\n} from './actionCreators'\r\nimport { \r\n    setProgressStatus\r\n} from '../../../../../global/progress/action'\r\nimport { SERVER_URL, DEFAULT_TEMPLETES, SAVED_TEMPLETES, FILE_IMPORT} from \"../../../../../global/constants\" \r\nconst fetchDefaultTemplates = () => {\r\n        return dispatch => {\r\n            axios\r\n                .get(`${SERVER_URL}${DEFAULT_TEMPLETES}`)\r\n                .then((res)=>{\r\n                    let serData =[]\r\n                    res.data.forEach((element)=>{\r\n                        let fields = {...element.fields ,Items: JSON.parse(element.fields.Items)}\r\n                        element.fields = fields\r\n                        serData.push(element)\r\n                    })\r\n                    dispatch (defaltTemplates(serData))\r\n                })\r\n                .catch((error) => {\r\n                    alert(error)\r\n                })\r\n        }\r\n}\r\nconst fetchSavedTemplates = ( fetchApiData ) =>{\r\n    return dispatch => {\r\n        axios\r\n            .get(`${SERVER_URL}${SAVED_TEMPLETES}`, { params : fetchApiData })\r\n            .then((res)=>{ \r\n                let serData =[]\r\n                    res.data.forEach((element)=>{\r\n                        let fields = {...element.fields ,MappedItems: JSON.parse(element.fields.MappedItems)}\r\n                        element.fields = fields\r\n                        serData.push(element)\r\n                    })\r\n                dispatch (savedTemplates(serData))\r\n            })\r\n            .catch((error)=>{\r\n                alert(error)\r\n            })\r\n    }\r\n}\r\nconst uploadFileData = ( postApiData ) => {\r\n    return dispatch => {\r\n        dispatch(setProgressStatus(true))\r\n        axios\r\n            .post(`${SERVER_URL}${FILE_IMPORT}/`, postApiData )\r\n            .then((res)=>{ \r\n                dispatch(setProgressStatus(false))\r\n                alert(res.data)\r\n                dispatch(resetUploadStates())\r\n                \r\n            })\r\n            .catch((error)=>{\r\n                dispatch(setProgressStatus(false))\r\n                alert(error)\r\n            })\r\n    }\r\n}\r\nexport { fetchDefaultTemplates, fetchSavedTemplates, uploadFileData }","import React, { useEffect } from 'react'\r\nimport { Grid, Typography, Box ,Button } from '@material-ui/core'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { shadows } from '@material-ui/system'\r\nimport { CloudUpload } from '@material-ui/icons'\r\nimport readXlsxFile from 'read-excel-file';\r\nimport DropDownSelect from '../../../../global/dropDownSelect'\r\nimport { fetchDefaultTemplates, fetchSavedTemplates, uploadFileData } from \"./upload/actions\"\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport PageviewIcon from '@material-ui/icons/Pageview';\r\nimport { \r\n    setSelectedDefaultTemplate, \r\n    setSelectedDefaultTemplateData, \r\n    setSelectedSavedTemplate, \r\n    setSelectedSavedTemplateData,\r\n    setAttachFileName,\r\n    setAttachFileHeader,\r\n    setAttachFileData,\r\n    resetUploadStates\r\n} from './upload/actionCreators'\r\nimport styled from 'styled-components'\r\nconst BorderWrapper = styled(Box)`\r\n    background: white;\r\n`\r\nconst getCol = (matrix, col)=> {\r\n    var column = [];\r\n    for (var i = 0; i < matrix.length; i++) {\r\n        column.push(matrix[i][col]);\r\n    }\r\n    return column;\r\n}\r\n\r\nfunction Upload() {\r\n    const dispatch = useDispatch()\r\n    const uploadData = useSelector(state => state.uploadDataStates)\r\n    const {\r\n        defaultTemplates,\r\n        selectedDefaultTemplate,\r\n        selectedDefaultTemplateData,\r\n        savedTemplates,\r\n        selectedSavedTemplate,\r\n        selectedSavedTemplateData,\r\n        attachFileName,\r\n        attachFileHeader,\r\n        attachFileData\r\n    } = uploadData\r\n\r\n    \r\n    const defaultTempleteSelectHandle = (e)=>{\r\n        let selectedIndex = e.target.selectedIndex;\r\n        let defaultTemplateReference = parseInt(e.target.options[selectedIndex].getAttribute(\"pk\"));\r\n        dispatch(setSelectedDefaultTemplate(defaultTemplateReference))\r\n        defaultTemplates.forEach((element)=>{\r\n            if(element.pk===defaultTemplateReference){\r\n                dispatch(setSelectedDefaultTemplateData(element.fields.Items))\r\n            }\r\n        })\r\n        dispatch(fetchSavedTemplates({defaultTemplateReference, project : \"1\"}))\r\n    }\r\n\r\n\r\n    const savedTempleteSelectHandle = (e) =>{\r\n        let selectedIndex = e.target.selectedIndex;\r\n        let savedTemplateReference = parseInt(e.target.options[selectedIndex].getAttribute(\"pk\"));\r\n        dispatch(setSelectedSavedTemplate(savedTemplateReference))\r\n        savedTemplates.forEach((element)=>{\r\n            if(element.pk===savedTemplateReference){\r\n                dispatch(setSelectedSavedTemplateData(element.fields.MappedItems))\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    const uploadFileHandle = (e) =>{\r\n        try {\r\n            dispatch(setAttachFileName(e.target.files[0].name))\r\n            readXlsxFile(e.target.files[0]).then((data) => {\r\n                let allData = data.slice(1, -1)\r\n                dispatch(setAttachFileHeader(data[0]))\r\n                dispatch(setAttachFileData(allData))\r\n            })\r\n        }\r\n        catch (err) {\r\n            dispatch(setAttachFileName(attachFileName))\r\n        }\r\n    }\r\n\r\n\r\n    const uploadDatahandle = () =>{\r\n        if (selectedSavedTemplate == \"\" || selectedDefaultTemplateData == \"\" || attachFileData.length == 0 || attachFileHeader.length == 0) {\r\n            if (selectedSavedTemplate == \"\") {\r\n                alert(\"!Select a Mapped Templete\" )\r\n            }\r\n            if (selectedDefaultTemplateData == \"\") {\r\n                alert(\"!Select a Default Templete\")\r\n            }\r\n            if (attachFileHeader.length == 0) {\r\n                alert(\"!Upload A File\")\r\n            }\r\n        }\r\n        else {\r\n            let columnsName = []\r\n            let columnsData = []\r\n            let sensitivityTypes = Object.keys(selectedSavedTemplateData)\r\n            sensitivityTypes.forEach((sensitivityType)=>{\r\n                let dataTypes = Object.keys(selectedSavedTemplateData[sensitivityType]);\r\n                dataTypes.forEach((dataType)=>{\r\n                    let allColumnsKeys = Object.keys(selectedSavedTemplateData[sensitivityType][dataType])\r\n                    allColumnsKeys.forEach((dbColumn)=>{\r\n                        let fileColumn =selectedSavedTemplateData[sensitivityType][dataType][dbColumn]\r\n                        let indexInFileColumns = attachFileHeader.indexOf(fileColumn)\r\n                        if( indexInFileColumns != -1){\r\n                            let tcol = getCol(attachFileData, indexInFileColumns)\r\n                            columnsName.push(dbColumn)\r\n                            columnsData.push(tcol)\r\n                        }\r\n                    })\r\n                })\r\n            })\r\n            const uploadApiData = {\r\n                project : '1',\r\n                columnsName,\r\n                columnsData,\r\n                table : selectedDefaultTemplate\r\n            }\r\n            dispatch(uploadFileData(uploadApiData))\r\n        }\r\n    }\r\n    useEffect(()=>{\r\n        dispatch(fetchDefaultTemplates())\r\n    },[])\r\n    return (\r\n        <BorderWrapper mb={3} p={2} boxShadow= {3}>\r\n            <Grid container spacing={0}>\r\n                {/* <Grid xs={12} sm={12} md={12} lg={12} xl={12} >\r\n                    <Typography variant=\"h6\" component=\"h5\" align=\"left\" gutterBottom>\r\n                        <Box color=\"grey\">Upload Data</Box>\r\n                    </Typography>\r\n                </Grid> */}\r\n                <Grid xs={12} sm={12} md={4} lg={4} xl={4}>\r\n                    <Box m={1}>\r\n                        <DropDownSelect\r\n                            dataList={ defaultTemplates }\r\n                            DataType=\"WithPkAndFieldName\"\r\n                            fieldName = \"TableName\"\r\n                            label=\"Table\"\r\n                            onChangeEvent={(e) => defaultTempleteSelectHandle(e)}\r\n                        />\r\n                    </Box>\r\n                </Grid>\r\n                <Grid xs={12} sm={12} md={4} lg={4} xl={4}>\r\n                    <Box m={1}>\r\n                        <DropDownSelect\r\n                            dataList={ savedTemplates }\r\n                            DataType=\"WithPkAndFieldName\"\r\n                            fieldName = \"MappingName\"\r\n                            label=\"Saved Templete\"\r\n                            onChangeEvent={(e) => savedTempleteSelectHandle(e)}\r\n\r\n                        />\r\n                    </Box>\r\n                </Grid>\r\n                {/* <Grid xs={12} sm={12} md={1} lg={1} xl={1}>\r\n                    <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\r\n                        <PageviewIcon />\r\n                    </IconButton>    \r\n                </Grid> */}\r\n                <Grid xs={12} sm={12} md={3} lg={3} xl={3}>\r\n                    <Box m={1}>\r\n                        <Button\r\n                            size=\"large\"\r\n                            variant=\"outlined\"\r\n                            component=\"label\"\r\n                            color=\"primary\"\r\n                            style={{ width: \"100%\" }}\r\n                            startIcon={<CloudUpload />}\r\n                            onChange={(e) => uploadFileHandle(e)}\r\n                            >\r\n                            { attachFileName }\r\n                            <input\r\n                                type=\"file\"\r\n                                style={{ display: \"none\" }}\r\n                            />\r\n                        </Button>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid xs={12} sm={12} md={1} lg={1} xl={1}>\r\n                    <Box m={1}>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            size=\"large\"\r\n                            style={{ width: \"100%\" }}\r\n                            onClick={uploadDatahandle}\r\n                        > Upload\r\n                        </Button>\r\n                    </Box>\r\n                </Grid>\r\n\r\n            </Grid>\r\n            </BorderWrapper>\r\n    )\r\n}\r\n\r\nexport default Upload\r\n","import React, { useState } from 'react'\r\nimport Table from '../../../../global/table/table.table'\r\nimport { TEMPLATES_COLUMNS, MANAGE_TEMPLATES } from '../../../../global/constants'\r\nimport  Progress from '../../../../global/progress/Progress'\r\nimport UploadAndMapDataForm from './UploadAndMapDataForm'\r\nimport  UploadAndMapQueryForm from './UploadAndMapQueryForm'\r\nimport Upload from './Upload'\r\nfunction Invoice() {\r\n    const [selectedRow, setSelectedRow] = useState('');\r\n    const [actionType, setActionType] = useState('');\r\n    const [formState, setFormState] = useState(false);\r\n    const addNewDataHandle = () =>{\r\n        setActionType(\"New\")\r\n        setFormState(true)\r\n    }\r\n    const editDataHandle = (rowData) =>{\r\n        setSelectedRow(rowData)\r\n        setActionType(\"Edit\")\r\n        setFormState(true)\r\n    }\r\n    return (\r\n        <>\r\n            <Upload/>\r\n            <UploadAndMapQueryForm\r\n                apiLink = { MANAGE_TEMPLATES }\r\n            />\r\n            <Table\r\n                tableHeaders = { TEMPLATES_COLUMNS }\r\n                selectOption = { true }\r\n                paginationOption = { true } \r\n                apiLink = { MANAGE_TEMPLATES }\r\n                addNewDataHandle = { addNewDataHandle }\r\n                editDataHandle = { editDataHandle }\r\n            />\r\n             {\r\n                formState &&\r\n                    <UploadAndMapDataForm\r\n                        apiLink = { MANAGE_TEMPLATES }\r\n                        table = { 'Mapping' }\r\n                        actionType = { actionType }\r\n                        formState = { formState }\r\n                        formData = { selectedRow }\r\n                        formCloseEvent = { () => setFormState(false) }\r\n                    />\r\n            }\r\n            {\r\n                <Progress/>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Invoice"],"sourceRoot":""}